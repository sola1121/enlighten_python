内容目录
网络 --> 进程线程 --> web服务器模型
MongoDB --> regex --> 项目

互联网 用于 网络数据传输

ISO(国际标准化组织)与CCITT(国际电报电话咨询委员会) 制作了 网络体系结构标准 OSI模型 Open System Interconnect

---------------------------------------

OSI七层模型 (由上到下)
应用层 application layer --> 表示层 presentation layer --> 会话层 session layer --> 传输层 transport layer --> 网络层 network layer --> 链路层 data link layer --> 物理层 physical layer

应用层 : 提供用户服务, 具体内容由特定程序规定 
表示层 : 提供数据的压缩解压和加密等
会话层 : 建立了程序级的连接, 决定使用什么样的传输服务
传输层 : 提供合适的通信服务, 流量控制
网络层 : 路由选择, 网络互联, 分组传输
链路层 : 提供链路交换, 具体消息发送. 具体点描述: 建立逻辑连接, 进行硬件地址寻址, 差错校验等. 涉及mac地址
物理层 : 物理硬件, 接口

逐层打包, 层层传递, 这是一个很复杂的过程

OSI模型的优点: 将功能分开, 降低网路传输中的耦合度, 每一部分完成自己的功能, 开发更加清晰

高内聚: 使模块功能尽可能的单一, 不混杂
低耦合: 模块之间尽量减少互相的关联和影响

---------------------------------------

四层, 五层模型

TCP/IP模型 (四层)
应用层 : 应用层, 表示层, 会话层
传输层 : 传输层
网络层 : 网络层
物理链路层 : 链路层, 物理层

五层模型
应用层 : 应用层, 表示层, 会话层
传输层 : 传输层
网络层 : 网络层
链路层 : 链路层
物理层 : 物理层 

TCP/IP模型是当前的网络实现模式

---------------------------------------

什么是协议
网络协议 : 网络通信中, 各方必须遵守的规定, 包括建立什么连接, 如何识别, 消息结构等
协议的本质就是软件

应用层 : 涉及的协议有 HTTP, FTP, TFTP, SMTP, SNMP, DNS, TELNET, HTTPS, POP3, DHCP
表示层 : 涉及的数据表达方式有 JPEG, ASCII, DECOIC, 加密格式等 
会话层 
传输层 : 涉及的协议有 TCP, UDP, 数据包一旦离开网卡即进入网络传输层
网络层 : 涉及的协议有 ICMP, IGMP, IP(IPV4, IPV6), ARP, RARP
链路层 : 涉及的协议有 底层网络定义协议
物理层 : 涉及的协议有 底层网络定义协议

---------------------------------------

网络概念

主机 : 计算机的名称
       localhost

import socket
socket.gethostname()   # 'tedu'
socket.gethostbyname('tedu')   # '127.0.0.1'
socket.gethostbyname('localhost')   # '127.0.0.1'
socket.gethostbyaddr('www.bilibili.com')   # 返回主机名, ip地址的列表


IP地址
对应的是网络中的某台电脑

IPV4   2**32个 
例如: 127.0.0.1 (本机)
点分是十进制: 三个点分为四部分, 0~255

IPV6   2**128个
例如: 2001:0DB8:0000:0023:0008:0800:200C:417A 简写: 2001:DB8:0:23:8:800:200C:417A
点分是十六进制
让有可分配的更多的IP地址

127.0.0.1 : 本地测试IP
0.0.0.0 : 局域网可用IP
192.168.1.0 : 表示网段
192.168.1.1 : 网关 (一个网络连接到另一个网络的端口)
192.168.1.255 : 广播地址


linux OS上使用 ifconfig查看各IP, 使用 ping 命令检测联通性

IP二进制转换
socket.inet_aton('127.0.0.1')   # b'\x7f\x00\x00\x01'
socket.inet_ntoa(b'\x7f\x00\x00\x01')   # '127.0.0.1'

socket.inet_pton(socket.AF_INET, '127.0.0.1')   # 转换IPV4, socket.AF_INET表示转换的ipv4
socket.inet_pton(socket.AF_INET6, '2001:DB8:0:23:8:800:200C:417A')   # 转换IPV6, socket.AF_INET6表示转换的ipv6
也有
socket.inet_ntop   socket.inet_ntop   换二进制IP地址到对应描述进制


端口号
端口号是地址的组成部分, 在一个系统中区分应用层程序, 一个端口号对应一个应用, 即对应的电脑中的哪一个进程
范围共1~65535 

知名端口号
    1~255: 众所周知的端口
    256~1023: 系统端口
动态端口号
    1024~65535
    自制程序推荐端口号在10000以上, 意不冲突

获取一个应用的端口
socket.getservbyname('mysql')   # 3306
socket.getservbyname('https')   # 443


子网掩码 : 和IP配合过滤网段
DNS : 域名解析


字节序
不同系统内部对字节序的存储使用可能有不同, 为了使消息传输的统一, 使用网络字节序
大端序 : 高字节存在高地址
小端序 : 低字节存在低地址
网络字节序 : 在信息传输中使用的标准序, 采用了大端序

---------------------------------------

传输层服务

TCP协议

面向连接 --> 建立可靠的数据传输

三次握手
是指在建立一个TCP连接的时候, 需要客户端向服务端总共发送3个包确认连接的建立
1) 客户端向服务器发起连接请求 (是否可以连接)
2) 服务器收到请求后进行确认 (语序连接) 返回报文
3) 客户端收到许可,建立连接

四次挥手
是指在断开一个TCP连接的时候, 需要经过4次确认. TCP连接是双向的, A连B与B连A都要断开.
1) 主动方发送报文告知被动方要断开连接
2) 被动方返回报文, 告知收到请求, 准备断开
3) 被动方发送报文给主动方告知准备就绪可以断开
4) 主动方发送报文确定断开

可靠传输 : 无失序  无差错  无丢失  无重复

应用情况: 适用于传输内容较大, 网络情况较好, 需要提供准确的传输情况
比如: 聊天信息, 文件传输, 邮件等


UDP协议

面向无连接的服务 --> 不可靠的数据传输

发送时完全由发送端自主进行, 不考虑接收端

应用情况: 网络较差, 对传输准确性要求低, 广播组播
比如: 视屏会议, 广播数据


总结
    网络编程三元素
        ip地址, 相当于住哪个小区
        端口号, 相当于所住小区的门牌号
        协议, 相当于打电话双方用的语言

    网络中的数据都是以二进制数据流的方式传播的, 即字节类型的数据
