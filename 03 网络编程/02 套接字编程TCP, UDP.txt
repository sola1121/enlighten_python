---------------------------------------

套接字编程

套接字 socket : 进行网络通信的一种手段. TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点, 这种端点就叫做套接字或插口.
socket = IP address + TCP/UDP + port

流式套接字(SOCKET_STREAM) : 传输层基于TCP协议进行通信

数据报套接字(SOCKET_DGRAM) : 传输层基于UDP协议进行通信

原始套接字(SOCK_RAW) : 访问底层协议的套接字

---------------------------------------

TCP服务端
1) 创建流式套接字
    socket(socket_family=AF_INET,   # 使用IPV4(默认)
           socket_type=SOCKET_STREAM,   # 使用流式套接字
           proto=0   # 通常为0, 表示的是选择子协议, TCP和UDP没有子协议
    )
        功能: 创建套接字
        参数: 
            socket_family: 选择地址族种类 AF_INET(IPV4), AF_INET6(IPV6), AF_UNIX
            socket_type: 套接字类型, SOCKET_STREAM(字节流), SOCKET_DGRAM(数据报), SOCK_RAW(原始)
            proto: 子协议类型, 默认为0, 不使用子协议
        返回值: 返回创建的套接字, 使用此套接字对象相应的函数进行实际操作

2) 绑定IP和端口号
    设, 套接字socket对象返回值绑定在server
    server.bind()   
        功能: 为socket对象绑定IP和端口
        参数: 是一个元组, 第一项是字符串形式的IP, 第二项是端口号 如: ('127.0.0.1', 12345)

3) 让套接字具有监听功能(设置监听队列大小, linux系有默认的, 设置了等于没设置)
    server.listen(n)
        功能: 使套接字变为监听套接字, 同时创建监听队列
        参数n: n表示监听队列的最大值
              什么队列: 还处在握手中或还未来得及处理的请求

4) 等待客户端连接
    server.accept()
        功能: 阻塞等待客户端连接
        返回值: 具有两个元素的元组. 第一个, 返回一个新的套接字用来和客户端通信. 第二个, 返回连接的客户端的地址.

5) 消息的收发
    设, accept返回的新的通讯套接字为conn
    conn.recv(buffer)   # receive
        功能: 接收消息
        参数: 一次接收消息的大小(单位: 字节)
        返回值: 接收到的内容

    conn.send(data)
        功能: 发送消息
        参数: 发送的内容(单位: 字节)
        返回值: 发送了多少个字节

        # 使用Ctrl + c 结束会报send的pipe管道破裂

6) 关闭套接字
    close()
    功能: 关闭套接字, 经历四次挥手
    关闭通讯套接字 conn.close()
    关闭套接字管道 server.close()

使用 telnet 127.0.0.1 12345 命令可以测试连接


TCP客户端
1) 创建流式套接字
    socket(socket_family=AF_INET,   # 使用IPV4(默认)
           socket_type=SOCKET_STREAM,   # 使用流式套接字
           proto=0   # 通常为0, 表示的是选择子协议, TCP和UDP没有子协议
    )
        功能: 创建套接字
        参数: 
            socket_family: 选择地址族种类 AF_INET(IPV4), AF_INET6(IPV6), AF_UNIX
            socket_type: 套接字类型, SOCKET_STREAM(字节流), SOCKET_DGRAM(数据报), SOCK_RAW(原始)
            proto: 子协议类型, 默认为0, 不使用子协议
        返回值: 返回创建的套接字, 使用此套接字对象相应的函数进行实际操作

2) 发起连接请求
    设, 套接字socket对象返回值绑定在client
    client.connect()
        功能: 发起连接
        参数: 一个元组. 第一个元素. 服务器的IP, 第二个元素, 服务器的port
    
3) 收发消息
    client.send(data)
        功能: 发送消息
        参数: 发送的内容(单位: 字节)
        返回值: 发送了多少个字节

    client.recv(buffer)
    功能: 接收消息
        参数: 一次接收消息的大小(单位: 字节)
        返回值: 接收到的内容

4) 关闭套接字
    close()
        功能: 关闭套接字, 经历四次挥手
        关闭套接字 client.close()


总结体会: 
    服务器需要建立两层socket, 一层用于维持对外管道, 里面的一层, 即通过accept返回的新的socket对象, 是连接的具体的客户端, 为相应的客户端通信就使用这个接收的对象
    客户端只需要创建一个socket对象, 使用connect方法直接去与服务器连接, 这会让服务器生成新的第二层socket用于通讯
    服务器一般是被动的接收客户端的请求, 所以应该先写recv方法, 在send, 客户端则相反
 
    在服务器端accpt()阻塞等待时, 客户端以connet()连接该服务器端, TCP三次握手便发生. 

---------------------------------------

# 关于recv和send

recv是阻塞函数

接收缓冲区, 发送缓冲区

◆ 因为网络或者处理能力的限制, 发送内容或者接收内容都是先放在缓冲区, 等到处理时才从缓冲区提取
◆ recv接收消息当一次接收不完的时候会下次继续接收
◆ 当recv阻塞时, 如果客户端断开, 则recv立即返回一个空字符串


# TCP粘包处理

TCP中数据以数据流的方式发送接收, 每次发送的数据间没有边界, 在接收时, 可能造成数据的粘连即为粘包

粘包如何处理
◆ 每次发送消息结束为止加标志
◆ 发送的消息添加结构描述
◆ 当连续发送时, 每次发送有一个短暂延迟 sleep(0.1)

---------------------------------------

UDP通信

1) 创建数据报套接字
    server = socket(AF_INET, SOCKET_DGRAM, 0)

2) 绑定服务端地址
    server.bind(('127.0.0.1', 12345))

3) 收发消息
    data, addr = recvfrom(buffersize)
        功能: 接收数据报套接字消息
        参数: 每次最多接收消息的大小(单位: 字节)
        返回值: data 接收到的消息, addr 下次发送者的地址
    注意: recvfrom 一次接收一个数据包, 如果数据报一次没有接收完则会丢失没有接收的内容

    sendto(data, addr)
        功能: 发送消息
        参数: data 要发送的消息, addr 发送给某个主机的地址
        返回值: 发送消息的字节数

4) 关闭套接字
    server.close()


# UDP中不需要建立连接, 所以不像TCP那样, 每次用户连接都会返回一个新的socket对象


TCP与UDP的区别

◆ tcp传输数据使用字节流的方式传输, udp是数据bao
◆ tcp会产生粘包现象, udp不会
◆ tcp对网络条件要求高, udp更适合实时传输
◆ tcp编程可以保证传输的可靠性, udp则不保证
◆ tcp使用listen, accept来保证连接性, udp不需要
◆ 收发消息tcp使用recv send, sendall; udp使用 recvfrom sendto

补充: sendall用法同send, sendall发送成功返回None, 失败产生异常

套接字编程如同文件打开一样, 都是使用系统中的所给的API进行.


---------------------------------------

短连接
    客户端与服务器只交换依次, 如果在交互需要双方重新建立连接

长连接
    服务器端不主动关闭, 长连接生命周期取决于客户端

长连接体现在TCP编程中就是将服务器中, 当创建了socket对象, 并开始监听后, 将接收请求accept()写到一个循环中, 让该socket不停的接收/发送消息
如
    while True:
        conn, addr = server.accept()   # 进行三次握手, 接收客户端消息

        data = conn.recv()

        conn.send(b"200")

        conn.close()
