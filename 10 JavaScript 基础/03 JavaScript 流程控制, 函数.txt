流程结构
    1) 顺序结构
    2) 分支结构(选择结构)
    3) 循环结构

1. 分支结构
    作用: 根据条件, 选择某一段代码去执行
    if 结构
        1)
            if(条件){
                语句块
            }
            注意:
                (1) if后的{}是可以省略的, 如果省略的话, 则只控制该结构下的第一条语句
                (2) if后的条件尽量是boolean类型的, 如果是以下条件当成假运算
                    if(0){}
                    if(0.0){}   // 与零等值的变量为假
                    if(""){}   // 空字符为假
                    if(null){}
                    if(NaN){}
                    if(undefined){}
        2)
            if(条件){
                语句块1
            } else {
                语句块2
            }
        3)
            if(条件1){
                语句块1
            } else if(条件2){
                语句块2
            } else if(条件3){
                语句块3
            } else{
                语句块
            }
        
    switch 结构
        场合: 只有在做等值判断的时候可以使用switch
        语法
            switch (变量) {
                case 值1:
                    语句块1
                    break;   // 可以省略, 但是不会跳出switch, 会顺序执行值2对应的语句块
                case 值2:
                    语句块2
                    break;
                ...
                default:   // 只有所有的case块都没有匹配上时, 才会执行default, 可以省略
                    语句块
            }
        注意
            (1) 变量和各个case块后面的值, 使用全等(===)的方式来判断的
            (2) 如果case后不增加break的话, 则从匹配的case开始, 向下依次执行(不判断), 直到碰到break为止

2. 循环结构
    循环的作用
        重复的执行相同或相似的代码
    循环二要素
        循环条件
        循环操作(循环体)
    1) while 循环
        语法
            while(条件){
                循环体
            }
    
    2) do ... while 循环
        语法
            do{
                循环体
            } while(条件);
        流程
            先执行循环体
            判断循环条件
            如果条件为真, 则继续执行循环操作, 否则退出循环

    条件满足执行循环体

    3) for 循环
        语法
            for(表达式1; 表达式2; 表达式3) {
                循环操作
            }
            表达式1: 循环条件的声明
            表达式2: 循环条件的判断
            表达式3: 更新循环变量
        流程
            (1) 先执行表达式1, 声明循环条件(执行1次)
            (2) 判断表达式2的值, true或false
            (3) 如果为true, 则执行循环操作, 如果为false, 则退出循环
            (4) 执行完循环操作之后, 再执行表达式3

        for 与 while对比
        相同点
            先判断循环条件, 再执行循环操作的结构
        不同点
            while优先用在不确定循环次数的场合下
            for优先用在确定循环次数的场合下

    4) 循环的流程控制
        break
            用在循环体内, 用于跳出整个循环结构
        continue
            用在循环体内, 用于跳出本次循环, 继续执行下次循环

    5) 循环的嵌套
        允许在一个循环内部再出现循环

---------------------------------------

函数
    1. 什么是函数
        函数,即function, 是一段预定义好, 可以独立执行并包含多条执行语句的代码块
    优点
        多条执行语句的封装
        实现了代码的复用
    2. 在JS中创建函数
        function 函数名(参数列表){
            函数体
            [返回值]
        }
        参数列表
            如果没有参数, 可以为空
            如果有参数, 就编写参数列表. 如果参数是多个的话, 各个参数之间使用","隔开.
            有参数的函数, 在调用时就要传参, 如果未传参的话, 参数的值就是undefined
        返回值
            在函数体内, 经过运算后, 需要传递给函数调用者的一个值, 就是返回值
            返回值是可选的, 有返回值的话, 需要使用return进行返回, JS函数仅能返回一个值
    3. 变量的作用域
        什么是变量的作用域
            变量的作用域指的是变量的可访问范围
        1) 作用域的分类
            (1) 局部变量
                使用var关键字声明在某个函数内的变量, 都是局部变量
                注: 局部变量只能在声明的函数内使用, 出了函数则无法使用
            (2) 全局变量
                在function之外声明的变量都是全局变量
                声明变量不使用var关键字的时候, 都是全局变量
                注: 全局变量可以应用在各个函数中以及各个位置处
                注意: 全局变量, 推荐放在所有的function之外, 使用var关键字去声明

