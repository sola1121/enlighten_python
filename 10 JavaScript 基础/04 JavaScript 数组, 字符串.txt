数组 - Array

什么是数组
    数组是一个用于保存批量数据的数据结构
    数组是按照线性结构来保存数据的
1 .创建数组
    1) 创建一个空数组
        var 数组名 = [];
    2) 创建数组并初始化元素
        var 数组名 = [元素1, 元素2, ... ,元素n];
    3) 创建一个空数组
        var 数组名 = new Array();
    4) 创建数组并初始化元素
        var 数组名 = new Array(元素1, 元素2, ... , 元素n);
    注意:
        var 数组名 = new Array(length) length为Number类型
        示例
            var 数组名 = new Array(5);   // 只写一个数字的话表示的数组的初始化长度为5, 而不是元素
2. 数组的使用
    获取或设置数组的元素值, 一律使用下标
    下标从0开始, 到数组元素个数-1结束
3. 获取数组的长度
    属性: length
    用法: 数组名.length
    注意: 这是一个属性, 不是方法
    1) 使用场合
        (1) 能够找到数组中, 最新要插入元素的位置(即向数组尾部增加元素时使用)
            示例
                arr[arr.length] = "新的元素"
        (2) 清空数组
            将数组的length属性设置为0, 即表示清空数组中所有的元素
            示例
                arr.length = 0   // 将会清空数组
        (3) 配合循环, 遍历数组中的每一个元素
            // 从头遍历到尾
            for (var i=0; i<arr.length; i++){ arr[i] }
            // 从尾遍历到头
            for (var i=arr.length; i>=0; i--){ arr[i] }
4. 常用API
    1) toString()
        作用: 将数组转换成字符串, 将转换后的字符串进行返回
        示例
            var arr = ["siro", "kizuna_ai", "luna"]
            arr.toString()   // siro,kizuna_ai,luna
            "数组: " + arr   // 会隐式调用toString()让字符串相加
    2) join(seperator)
        作用: 返回一个由seperator连接的数组元素的字符串
        示例
            var arr = ["siro", "kizunaai", "luna"]
            arr.join("~")   // siro~kizunaai~luna
    3) reverse()
        作用: 反转
        注意: 该函数会改变现有数组的结构
    4) sort()
        作用: 对现有数组的内容进行排序, 默认按照元素Unicode码进行升序排序(可以看做都是按照字符串的方式进行排序)
        注意: 该函数会改变现有数组的结构
        ● 允许通过自定义的排序规则(排序函数)来指定数字的排序方式
            语法: arr.sort(排序函数)
                (1) 升序(降序)的排序函数
                    function sortAsc(a, b){
                        return a-b;   // return b-a 就是dec降序排列
                    }
                    ● 将sortAsc指定为排序函数
                    ● 数组会自动将相邻的两个数字传递到参数的位置处
                    ● 如果返回值是>0的数字的话, 则交换两个数字的位置, 否则不变
                    指定排序函数: arr.sort(sortAsc);
                (2) 使用匿名函数指定排序规则
                    匿名函数: 是一个没有名称的函数, 只为某一功能而存在
                        arr.sort(function(a, b){return a-b});   // 升序排列
                        arr.sort(function(a, b){return b-a});   // 降序排列
5. 进出栈操作
    栈式操作: 提供了快速操作数组头部和尾部元素的方法
    方法
        1) push()
            入栈, 压栈, 向数组尾部增加新元素, 并返回新数组的长度
            arr.push("siro")   // 等同于 arr[arr.length] = "siro"
        2) pop()
            出栈, 弹栈, 删除并返回数组尾部的元素
        3) unshift()
            向数组的头部添加新元素并返回数组的长度
        4) shift()
            删除并返回数组头部的元素
        示例:
            /* 删除指定元素 */
            var index = -1
            for (var i=0; i<arr.length; i++){
                if (rbook == arr[i]) {
                    index = i
                }
            }
            if (index == -1){
                window.alert("查无此元素.")
            } else {
                console.info("删除:", arr[index])
                for (var i=index; i<arr.length-1; i++){
                    // 依次赋值后一个元素
                    arr[i] = arr[i+1]
                }
                // 移除最后一个空元素
                arr.pop()
                console.info("现在:", arr.length, arr.join(", "))
            }

6. 二维数组
    什么是二维数组
        数组中每个元素又是一个数组
    声明二维数组
        var arr = [
            [11, 12, 13],
            [21, 22, 23],
            [31, 32, 33]
        ];
    
---------------------------------------

字符串 - String
    1. 声明字符串
        var str1 = "字符串1";
        var str2 = String("字符串2");
        var str3 = new String("字符串3");
    2. length属性
        作用: 返回当前字符串中字符的个数
    3. 常用函数 - String API
        1) 大小写转换函数
            (1) toUpperCase()
                返回当前字符串的完全大写形式
            (2) toLowerCase()
                返回当前字符串的完全小写形式
        2) 获取指定位置的字符或字符的Unicode码
            (1) 获取指定位置的字符
                函数: str1.charAt(index)
                当获取超过字符length的返回空值
            (2) 获取指定位置的字符的Unicode码
                函数: str1.charCodeAt(index)   // 获取到的是一个十进制的数值
                示例
                    /* 如果想要十六进制 */
                    var result = str1.charCodeAt(3)
                    result = result.toString(16)   // 不满足四位的使用0补齐
        3) 检索字符串
            indexOf(value, fromIndex)
                value: 要查找的子字符串
                fromIndex: 从哪个下标位置处开始查找, 如果省略, 则从第一个字符处开始查找
                返回值: 返回value第一次出现的下标, 如果没有查询到子字符串的话, 则返回-1
            lastIndexOf(value, fromIndex)
                作用: 查找value最后一次出现的下标
        4) 截取子字符串
            函数: substring(start, end)
            作用: 返回从start到end-1之间的字符串, 如果省略end的话, 则截取到整个字符串的尾部
        5) 分割字符串
            作用: 将一个由指定连接符的字符串, 按照连接符拆开, 拆分成一个字符串数组
            函数: split(连接符)

        6) 模式匹配
            作用: 配合着正则表达式完成字符串的查找和替换
            正则表达式
                语法: /正则格式/修饰符
                    修饰符:
                        i : ignorecase (忽略大小写)
                        g : global (全局匹配)
                        m : mutiple (允许多行匹配)
                示例
                    /\d{2,6}/g   // 全局匹配2~6个的数字
            函数
                (1) replace(substr/regexp, replacement)   
                    作用: 在一个字符串中, 将substr或满足regexp格式的字符串替换成replacement
                (2) match(substr/regexp)
                    按照指定的子字符串或正则表达式进行匹配, 并返回满足格式的子字符串(数组)



