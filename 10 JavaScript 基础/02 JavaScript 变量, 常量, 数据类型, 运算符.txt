JS中的变量和常量
    1. 变量
        1) 声明变量的方式
            声明: var 变量名; 
            赋值: 变量名 = 值;
            声明并赋值: var 变量名=值;
            注: 要避免使用关键字做变量, 比如name
                不使用var声明的变量是全局变量
        注意
            在声明变量时, 尽量使用var关键字, 如果省略var的话, 也可以, 但容易出问题 - 全局污染
            声明变量如果未赋值的话, 默认值为undefind
        变量名的命名规范
            1) 不能是JS中的关键字和保留关键字
            2) 由字母 数字 下划线_ $ 组成
            3) 数字不能做开头
            4) 尽量不要重复
            5) 尽量要见名知意
            6) 如无特殊需求, 尽量使用小驼峰命名法
        变量的使用方式
            1) 为变量赋值
                只要变量出现在赋值符号(=)的左边, 一律都是赋值操作
            2) 获取变量的值
                只要变量没出现在赋值符号(=)的左边, 一律都是取值操作
        赋值操作:
            先运算赋值符号右面表达式或值, 在赋值给左边的变量
            赋值符号的左边只能是变量
    
    2. 常量
        什么是常量
            一经声明, 就不允许被修改的数据
        语法
            const 常量名=值;
        注意
            0) 常量声明时就应该对其赋值, 不然可能会报错
            1) 常量声明好之后是不允许被修改的, 所以一定要赋值
            2) 常量名一般采用全大写形式
        计算时, 为防止精度丢失, 想保留到小数点n位 toFixed(n)
            示例
                var num = 3.141592653
                num = num.toFixed(2)   // 保留小数点两位

---------------------------------------

JS数据类型
    什么是数据类型
        数据的类型, 约束了数据在内存中所占的空间大小.
    1. JS中的数据类型分类
        1) 基本数据类型(原始类型)
            (1) Number类型
                数字类型, 可以表示32位(4字节)的整数或64位的浮点数(8字节)
                整数:
                    允许表示十进制, 八进制, 和 十六进制
                    十进制: var num = 314;
                    八进制: var num = 010;   // 但凡以零开始的数字都是八进制
                    十六进制: var num = 0x1A;   // 以0x开始的数字都是十六进制
                小数:
                    小数计数法: var num = 123.456;
                    指数计数法: var num = 1.5e3;   // 1.5 * 1000
            (2) String类型
                字符串类型
                由Unicode的字符, 数字和标点组成
                注意: 字符串在使用时必须用''或""引起来
                每个字符都有自己的Unicode码
                ● 查看字符的Unicode码
                    var str = "siro";
                    var i = str.charCodeAt(1);
                    var r = str.charCodeAt(2);
                    var o = str.charCodeAt(3);
                    var s = str.charCodeAt();   // 得到十进制Unicode码
                    var ori = s.toString();
                    var decimal = ori.toString(10);   // 转换为十进制, 默认
                    var binary = ori.toString(2);   // 转换为二进制
                ● 如何将Unicode码转换为对应的字符
                    已知Unicode码: 5f20
                    var str = "\u5f20"
                ● 中文范围
                    "\u4e00" ~ "\u9fa5"
                ● 常用转义字符
                    \n : 换行
                    \t : 制表符
                    \" : "
                    \' : '
                    \\ : \
            (3) Boolean类型
                布尔类型, 只用于表示真(true)或假(false)
                注意:  
                    Boolean类型是可以参与到数字运算中的, true当作1, false当作0, 进行运算
            (4) undefind类型
                产生undefind的情况
                    声明变量未赋值
                    访问对象不存在的属性时
            (5) 查看数据类型
                使用typeof()函数 或 typeof运算符查看变量的数据类型
        2) 引用数据类型

    2. 数据类型转换
        不同数据类型之间的数据在进行运算时是如何转换的
        1) 隐式转换
            (1) 数字 + 字符串
                将数字先转换为字符串, 再进行拼接
                var str = "nihao" + 123;
            (2) 数字 + 布尔值
                将布尔类型转换为数字运算
            (3)  字符串 + 布尔值
                将布尔类型转换为字符串, 再进行拼接
                var r = true + "nihao";   // truenihao
            (4) 布尔值 + 布尔值
                将布尔类型转换为数字运算
            注意: 
                任意类型与字符串做加法运算时, 都是将其他类型先转换为字符串, 再进行拼接
                字符串与数字进行运算时
                    加法 : 进行拼接
                    其余运算符(-, *, /, %) : 先将字符串转换为数字, 在做运算, 未能得出结果返回NaN
        2) 显示转换(转换函数, 强制转换)
            (1) toString()
                将任意类型的数据转换为字符串, 并返回转换后的结果
                语法: 
                    var new_data = 变量.toString();   // 不会改变原数据
                    var new_data = 变量 + "";   // 利用隐式转换
            (2) parseInt()
                将任意类型的数据转换成整数, 如果实在无法转换的话, 则返回NaN(Not a number)
                语法:
                    var r = parseInt(数据);
                示例:
                    var r = parseInt("13");   // 13
                    var r = parseInt("13.5");   // 13
                    var r = parseInt("nihao13");   // NaN
                    var r = parseInt("13nihao");   // 13
            (3) parseFloat()
                将任意类型的数据转换成浮点类型的数值, 无法转换返回NaN
            (4) Number()
                将任意类型的数据转换为数字(包含整数和小数), 只要包含非法字符的话, 结果就为NaN
                示例:
                    var r = Number("46");   // 46
                    var r = Number("46.3");   // 46.3
                    var r = Number("46hello")   // NaN
            常用于动态输入数据时(无论任何输入都是string类型)的类型转换, 保证数据使用的正确性
                
---------------------------------------

JS运算符
    1. 算数运算符
        +  -  *  /  %  ++  --

        ++ 自增运算符, 在自身数据的基础上只做+1运算
        -- 自减运算符, 在自身数据的基础上只做-1运算

        前缀++ : 对变量先自增, 再使用
        后缀++ : 先使用, 再对变量自增
        示例:
            var num = 5;
            console.info(num++); // 输出5, 然后num将会自增
            console.info(num); // 输出6

            var num = 5;
            console.info(++num); // num会先自增, 然后输出6
            console.info(num); //输出6

    2. 关系运算符(比较运算符)
        >  <  >=  <=  ==  !=  ===  !==

        "10" > 5;   // true
        如果运算符的两端有一个操作数时数字的话, 那么另外一个会自动通过Number()进行转换, 然后再进行比较

        "10a" < 5;   //false
        "10a" > 5;   //false
        先将"10a"通过Number()转换, 再与5比较, 转化结果为NaN
        NaN与任何数据类型(包括自己)做除!=运算外会为true之外, 其余的都是false 

        "siro" > "hinata";   // true
        比较每个字符的Unicode码

        "10" > "5";  //  false, "1"的Unicode码序比"5"小
        "50" > "5";   // true, "0"是有Unicode码

        === 和 !==
        "5" == 5;   // true, 会隐式转换后进行比较
        "5" === 5;   // false

        === : 比较数据的数值和数据类型都相等的情况下, 结果才为真
        !== : 比较数据的数值和数据类型只要有一个不等, 结果就为真

    3. 逻辑运算符
        ! : 非, 对现有条件取反, 等同于python中的not
        && : 与, 等同于python中的and
        || : 或, 等同于python中的or

    4. 位运算符
        1) 按位与: &
            3 & 5   3 -> 11,  5 -> 101

             011
            &101
            -----
             001  --> 1
        场合: 判断一个数字的奇偶性
            任意数字与1做按位与操作, 结果为1是奇数, 结果为0是偶数
                示例: 判断45的奇偶, 45 & 1
        2) 按位或: |
            3 | 5

             011
            |101
            -----
             111   --> 7
        场合: 取整的时候
            任意小数与0做按位或操作, 抛弃小数位, 保留整数位
            
        3) 按位异或: ^
            两个数字的二进制进行比较, 不同则为1, 相同则为0
            3 ^ 5

             011
            ^101
            -----
             110   --> 6
        场合: 在不借助第三方变量的前提下, 交换两个数字的位置
            示例:
                var a = 5, b = 3;
                第一步: a = a ^ b
                    0b110, 结果a = 6
                第二步: b = b ^ a;
                    011
                   ^110
                   -----
                    101   --> 5, 结果b = 5 
                第三步: a = a ^ b
                    110
                   ^101
                   -----
                    011   --> 3 结果a = 3 

    5. 条件运算符
        单目运算符(一元运算符): 只有一个操作数的运算符
            ++  --  !  typeof  
        双目运算符(二元运算符): 有两个操作数的运算符
            +  -  *  /  %  >  <  ==  !=  <=  >=  ===  !==  &&  ||  &  |  ^
        三目运算符(三元运算符): 有三个操作数的运算符
            ?:
            条件运算符 :
                语法
                    条件表达式 ? 表达式1 : 表达式2;
                先判断条件表达式的值, 如果为true, 则执行表达式1的操作, 否则执行表达式2的操作
                表达式1和表达式2的位置处, 还可以是一个条件表达式

    6. 赋值运算符
        +=  -=  *=  /=  %=  &=  |=  ^=
