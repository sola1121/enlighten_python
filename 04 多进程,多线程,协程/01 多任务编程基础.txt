多任务编程

通过应用程序利用多个计算机核心达到多任务同时执行的目的,以此来提升程序的执行效率


---------------------------------------

并发Concurrency 和 并行Parallelism

并发
    并发是指系统能够处理多个任务的能力，但这些任务可能并不是同时进行的。对于多个任务, 内核采用轮询时间片的方式逐个访问, 某一时间点实际只处理一个任务.
    在并发执行中，单个处理器通过快速切换任务的方式给人一种"同时处理多个任务"的错觉。实际上，这些任务在不同的时间片段内交替执行。 
    如: 大数据处理

并行
    并行是指多个任务或多个部分同时在多个处理器上执行。即使用多个内核同时执行多个任务.
    并行是并发的子集，只有在多核或多处理器环境中才能实现真正的并行执行。
    如: I/O密集型应用

实现并发与并行的方式
    多进程, 多线程

进程
    程序在计算机中一次执行的过程

区分程序与进程
    程序是一个静态的描述, 不占有计算机资源
    进程是一个动态的描述, 占有CPU内存的计算机资源, 是CPU管理资源的最小单位

注意:
    同一个程序, 每次执行都是不同的进程, 因为分配的计算机资源不同


---------------------------------------

进程 Process
    进程是CPU资源分配的最小单位, 也是操作系统进行资源分配和调度运行的基本单位

1.进程的创建流程
    用户空间运行程序发起进程创建申请 --> 调用OS内核接口创建进程 --> 分配计算机资源, 确定进程状态 --> 将新的进程提供给用户使用

2.多个进程,如何占用CPU
    一个内核同一时刻只能运行一个任务
    多个进程对内核资源进行争夺, 操作系统决定那个进程占有计算机核心
    占有计算机核心的进程称为该进程占有CPU的时间片

3.进程有哪些信息, 如何保存
    PCB(Process Control Block, 进程控制块) : 在linux或unix系统中进程创建后, 会在内存开辟一块空间存放进程的相关信息, 称为PCB

    查看此时系统中所有进程信息 ps -aux
    表头 : 用户   PID   占有内存   优先级 等
    PID : 在操作系统中进程中的唯一标志, 是大于0的整数, 由系统自动分配

4.进程特征
    进程是操作系统资源分配的最小单位
    每个进程单独占有4GB的虚拟内存
    进程之间相互独立, 运行不受影响


进程的状态
三态:
    就绪态 : 进程具备运行条件, 等待系统分配处理器运行
    运行态 : 进程占有CPU,处于运行的状态
    等待态 : 又称为阻塞态, 指进程暂时不具备运行的条件, 需要阻塞等待(time.sleep, socket.accept, input...)

五态:
    新建态 : 创建一个进程, 获取资源, 直接表现为运行一个程序, 或者在程序中创建新的进程
    就绪态
    运行态
    等待态 
    终止态 : 进程执行结束, 资源回收过程

查看进程信息 ps -aux
    STST 列表示进程状态
        D   等待态  不可中断等待 
        S   等待态  可中断等待
        T   等待态  暂停
        R   运行态
        Z   僵尸态
    附加状态
        +   前台进程  (不带+即为后台进程)
        <   高优先级
        N   低优先级
        l   有进程链接
        s   会话组

进程优先级
    优先级决定了一个进程的执行权限和占有资源的优先程度

    使用top命令动态查看当前运行的进程状态, 使用↑,↓翻页, q退出
    NI列表示的就为进程的优先级

    linux中优先级范围 -20 ~ 19, 数值越小, 优先级越高
    用户程序默认优先级为0

    nice : 以指定的优先级运行进程
        nice -10 运行文件名
    renice : 改变某个进程的优先级
        renice --2 进程号


父子进程
    在系统中除了出事化进程其他进程都有一个父进程, 可能有多个子进程

    进程树 pstree命令
    显示PPID的 ps -ajx 


概念学习要求
1. 什么是进程, 进程的特征
2. 进程状态, 每种状态是怎么回事, 转换
3. 进程和线程的区别
4. 孤儿进程, 僵尸进程
...

1. 进程线程区别和联系
2. 同步互斥的意义和实现方法
3. 进程线程使用什么样的方式通信
4. 进程线程的特点和选择
5. 简单的设计模式的理解
6. 僵尸进程, 进程状态, GIL等概念的理解