
进程间通信
磁盘交互 
    1) 速度慢
    2) 不安全

socket 本地套接字

管道 消息队列 共享内存 信号 信号量 套接字

---------------------------------------

管道   Pipe

在内存中开辟一块空间, 对多个进程可见, 通过管道, 多进程进行通信

multiprocessing.Pipe 方法

    Pipe([duplex]) 
        功能: 创建一个管道
        参数: duplex默认为True, 表示双向管道(可以收发), 设置为False, 则为单向管道(一方仅能收, 另一方仅能发)
        返回值: 返回两个管道流对象, 表示管道的两端
                如果是双向管道, 则两端均可读写, 如果为单向管道, 则fd1只能读, fd2只能写
        
        duplex=False, 只能: 接收消息 fd1.recv(), 发送消息 fd2.send()

    fd1.recv()
        功能: 接收消息(每次接收一条), 是一个阻塞函数
        参数: 无
        返回值: 接收到的消息
    * 如果没有消息会阻塞

    fd2.send(data)
        功能: 发送消息, 可以是字符串或其他类型
        参数: 要发送的内容
    * 如果没有接收端则管道破裂
    
    管道也有filno, close方法, 他也是一个IO操作

---------------------------------------

消息队列

队列: 先进先出

在内存中开辟队列模型, 用来存放消息. 任何拥有队列的进程都可以存取消息

创建队列
    
    multiprocessing.Queue([maxsize])
        功能: 创建一个消息队列
        参数: maxsize 默认为0, 表示队列可存放消息由内存而定
                      >0, 表示队列最多存放多少条消息
        返回值: 返回消息队列对象

    qu.put(obj[, block[, timeout]]) 
        功能: 向队列中存放消息(任何类型), 是一个阻塞函数
        参数: 要存放的消息
    * 当队列满时会阻塞

    qu.full()
        判断队列是否满了, 队列满了返回True, 未满返回False

    qu.get([block[, timeout]]) 
        功能: 从队列中取出消息, 是一个阻塞函数
        参数: 无
        返回值: 取出的消息
    * 当队列为空时会阻塞

    qu.empty()
        判断队列是否为空, 队列为空返回True, 非空返回False
    
    qu.qsize()
        得到当前队列中的等待消息个数

    qu.close()
        关闭队列, 不能再向其中添加数据了

    get 与 put 中的block与timeout参数
        block默认为True, 表示阻塞函数, 如果设置为False则不阻塞
        timeout, block为True时, 设置超时时间

---------------------------------------

共享内存

在内存中开辟一段空间, 存储数据, 对多个进程可见. 每次写入共享内存的数据会覆盖之前的内容. 由于对内存格式化较少, 所以存取速度快.

multiprocessing.Value(ctype, obj)
    功能: 开辟共享内存空间
    参数: ctype, 是一个str, 要转变的c类型(得对照Ctype转换表) 
          obj, 写入共享内存的初始值, 是C数据类型
    返回值: 返回一个共享内存对象

    创建时ctype要和obj类型匹配, 参考ctype表
    mem.value,  Value返回的共享内存对象中的value属性即是共享内存中的值, 其类型就是ctype类型的python类型

multiprocessing.Array(ctype, obj)
    功能: 开辟共享内存空间, 以C数组方式存储数据
    参数: ctype, 是一个表示C语言类型的字符
          obj, 存入到共享内存中的数据
               列表, 要求列表中数据类型一致, 对应的是C语言中的数组, 其数据类型就是一致的
               正整数, 表示开辟一个多大的序列空间, 即C语言中的数组大小
    返回值: 返回一个共享内存对象, 具有迭代特性

---------------------------------------

管道, 消息队列, 共享内存对比

           管道          消息队列       共享内存
开辟空间    内存           内存           内存

读写方式  双向/单向        先进先出      操作覆盖内存

效率       一般            一般           快

应用    多用于亲缘进程   方便灵活广泛     较复杂

是否需要     否              否           需要
互斥机制

---------------------------------------

信号

一个进程向另一个进程通过信号传递某种讯息

常见信号
tarena@tedu:~$ kill -l
 1) SIGHUP	     2) SIGINT	   3) SIGQUIT	  4) SIGILL	    5) SIGTRAP
 6) SIGABRT	     7) SIGBUS	   8) SIGFPE	  9) SIGKILL   10) SIGUSR1
11) SIGSEGV	    12) SIGUSR2	  13) SIGPIPE	 14) SIGALRM   15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD	  18) SIGCONT	 19) SIGSTOP   20) SIGTSTP
21) SIGTTIN	    22) SIGTTOU	  23) SIGURG	 24) SIGXCPU   25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	  28) SIGWINCH	 29) SIGIO	   30) SIGPWR
31) SIGSYS	...

Linux命令: 
    kill -l   # 查看所有信号
    kill -signame PID   # 给PID对应的进程发送一个信号

关于信号:
    信号的名称: 系统定义, 信号的名字
    信号的含义: 系统定义, 信号的作用
    信号的默认处理方法: 系统定义, 信号给接收进程带来的行为, 一般有, 终止 暂停 忽略

常用信号
    SIGINT: 键入INTR字符, Ctrl+C时发生, 终端驱动程序发送此信号并送到前台进程中的每一个进程, 终止进程
    SIGQUIT: 和SIGINT类似, 但基于QUIT字符, 由Ctrl+\发出
    SIGKILL: 用来立即结束程序的运行, 并且不能被阻塞, 处理和忽略
    SIGALRM: 当一个定时器到时发出
    SIGSTOP: 用于暂停一个进程, 并且不能被阻塞, 处理和忽略
    SIGTSTP: 用于暂停交互进程, Ctrl+z
    SIGCHLD: 子进程改变状态时, 父进程会收到这个信号

python如何处理信号
  涉及os模块, signal模块
    
    发送
        os.kill(pid, SIG)
            功能: 向一个进程发送一个信号
            参数: pid, 信号接收方pid; SIG, 要发送的信号
        
        signal.alarm(time) 
            功能: 向自生发生一个SIGALRM信号
            参数: 整数, 代表延迟多少秒发送
        * 信号属于异步通信方式, 信号的发送不会影响进程的持续执行
        * 一个进程中只能设置一个时钟, 以最新设置的准

    处理
        signal.pause()
            功能: 阻塞等待一个信号的发生

        signal.signal(signum, handler)
            功能: 处理一个信号
            参数: signum, 要处理的信号; 
                  handler, 对该信号的处理方法
                           SIG_DFL: 使用默认方式处理, (默认)
                           SIG_IGN: 忽略这个信号
                           func: 可以传入函数, 叫做回调函数, 已自定义的函数方式处理
            func格式要求
                def func(sig, frame):
                    ...
                sig: 接收到的信号
                frame: 信号对象

        * signal函数是一个异步处理信号函数, 只要执行, 在进程中就会按照指定方法处理信号
        * signal不能处理SIGSTOP和SIGKILL信号

回调函数, 当某一个的函数(python中对应的叫做高阶函数)的传入的参数任然是一个函数的时候, 传入的函数就叫做回调函数 callback

键盘发送信号会给终端所有进程

---------------------------------------

信号量

给定一定的信号数量, 对多个进程可见, 并且多个进程均可操作. 进程根据信号量的多少, 可以有不同的行为

multiprocessing.Semaphore([value]) 类, 对threading.Semaphore([value]) 的近似模拟

    Semaphore([value])
        功能: 定义信号量
        参数: 给定洗好量的初始个数, 为正整数
        返回值: 返回信号量对象

    sem.acquire() 将信号量减一, 减到0时在减会阻塞
    sem.release() 将信号量加一, 加到最大值时在增加会阻塞

工作类似一个全进程可见计数器, 根据计数的多少, 实现不同的功能, 也可用于进程间通讯

获取当前进程对象
multiprocssing.current_process()

