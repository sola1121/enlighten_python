周期性计划任务
    1) 进入周期性计划任务设置
        crontab -e
        如果是第一次使用, 会提示1-4选择, 选择4对内容进行编辑
    2) 设置周期性计划任务
        多久执行某个任务
            # 在某个时间段执行指定的的python脚本
            * * * * * python3 /home/tarena/python/01.py
            * 表示: 分时日月周
                分: 0-59
                时: 0-23
                日: 1-31
                月: 1-12
                周: 0-6
                * : 代表所有可能值
                , : 指定多个时间点
                    示例:
                        * * 1,5 * *   # 每月的1日和5日两天
                / : 指定时间间隔的频率
                    示例: 
                        */10 * * * *   # 每10分钟执行一次后面的命令
                - : 指定一个时间段
                    示例:
                        0 0-6/1 * * *   # 表示0点到6点之间每小时执行一次命令

    3) 示例
        (1) 每分钟执行一次01.py文件
            * * * * * python3 路径/01.py
        (2) 每小时的第3分钟和第15分钟执行
            3,15 * * * * python3 路径/01.py
        (3) 每周六, 周日的0点执行一个01.py文件
            0 0 * * 6,0 python3 路径/01.py
        (4) 每天18:00到23:00之间每小时执行01.py
            0 18-23/1 * * * python3 路径/01.py


设置开机启动
    1) 编写程序文件 一般是.sh
    2) 把文件拷贝到 /etc/init.d/ 中, 其中放的都是开机启动的脚本
    3) 修改文件权限(可执行权限)
    4) 将程序文件放到启动项中
        sudo update-rc.d 文件名.sh defaults 90   # 90表示优先级, 数字越大表示启动越晚
    5) 重启Linux操作系统
        reboot 或者 init 6
    

取消开机启动
    sudo update-rc.d -f 文件名.sh remove   # 移除了指定文件的启动
    
    
流编辑器
    sed(文本处理工具)
    sed为了不改变文件内容, 遵循输出处理后的副本
    打印 p, p表示段
        sed -n "p" file.txt   # 打印文件中的所有内容
        sed -n "2p" file.txt   # 打印文件中第三行内容
        sed -n "1,4p" file.txt   # 打印1-4行文件内容
        sed -n "1p;5p" file.txt   # 打印第1行和第5行
        sed -n "$p" file.txt   # 打印最后一行内容
    删除 d
        sed "1d" file.txt   # 删除第一行
        sed -i "3,5d" file.txt   # 删除原文本中的第3-5行的内容, 会对源文件造成影响 
        sed -i "$d" file.txt   # 删除最后一行的内容
    替换 c
        sed -i "条件c内容" file.txt   # 替换原文中指定的内容
        sed -i "1,3c内容" file.txt   # 替换源文件中第1第3行为内容
        sed -i -e "1c内容1" -e "2c内容2" file.txt   # 替换源文件第1行第2行为内容1,内容2
    添加 a/i
        a : 在当前处理行的下方添加新行
        i : 在当前处理行的上方添加新行
        sed -i "asiro" file.txt   # 所有行下方都添加siro
        sed -i "1asiro" file.txt   # 第一行下方添加siro
        sed -i "1isiro" file.txt   # 第一行上方添加siro
    替换 s
        sed -i 条件s/旧内容/新内容/选项
        选项: g表示全局替换
              i忽略字母大小写进行替换
        sed -i "1,3s/6/A/g" file.txt   # 1-3行中6全部变为A
        sed -i "s/[0-9]/B/g" file.txt   # 源文件中所有的数字替换为B
        sed -i "s/[0-9]\+/C/g" file.txt   # 源文件中连续出现的数字替换为C 

        加g表示全部替换, 不加g只替换指定行中的第一个

