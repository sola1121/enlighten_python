====================================内建模块=======================================

通过 sys.builtin_module_names 可查到内建的模块列表
'_ast', '_bisect', '_codecs', '_collections', '_datetime', '_elementtree', '_functools', '_heapq', 
'_imp', '_io', '_locale', '_md5', '_operator', '_pickle', '_posixsubprocess', '_random', '_sha1', 
'_sha256', '_sha512', '_signal', '_socket', '_sre', '_stat', '_string', '_struct', '_symtable', 
'_thread', '_tracemalloc', '_warnings', '_weakref', 'array', 'atexit', 'binascii', 'builtins', 
'errno', 'faulthandler', 'fcntl', 'gc', 'grp', 'itertools', 'marshal', 'math', 'posix', 'pwd', 
'pyexpat', 'select', 'spwd', 'sys', 'syslog', 'time', 'unicodedata', 'xxsubtype', 'zipimport', 'zlib'


---------------------------------------

imp模块
与模块导入相关的模块
可以使用reload方法重新导入某个模块, 用于功能更新

---------------------------------------

traceback模块
可以使用traceback.print_exc() 打印更加专业的异常信息

---------------------------------------

getpass模块
passwd = getpass.getpass()
在输入时可以自动提示输入密码, 并在输入时隐藏输入

---------------------------------------

pdb 试调模块

---------------------------------------

时间模块 time
变量
time.altzone	夏令时时间与UTC时间差(秒为单位)
time.daylight	夏令时校正时间
time.timezone	本地区时间与UTC时间差(秒为单位)
time.tzname	时区名字的元组， 第一个名字为未经夏令时修正的时区名,第一个名字为经夏令时修正后的时区名

方法
time.time()	返回从计算机元年至当前时间的秒数的浮点数(UTC时间为准)
time.sleep(secs)	让程序按给定秒数的浮点数睡眠一段时间
time.gmtime([secs])	将给秒数转换为用UTC表达的时间元组
time.asctime([tuple])	将时间元组转换为日期时间字符串
time.mktime(tuple)	将本地日期时间元组转换为新纪元秒数时间(UTC为准)
time.localtime([secs])	将UTC秒数时间转换为日期元组（以本地时间为准)

注: 时间元组时间元组是一个9个整型元素组成的,这九个元素自前至后依次为:
(四位的年, 月 (1-12), 日 (1-31), 时 (0-23), 分 (0-59), 秒 (0-59), 星期几 (0-6, 周一是 0), 元旦开始日 (1-366), 夏令时修正时间 (-1, 0 or 1).

示例:
"""计算时间间隔天数"""
import time

birth_y = int(input("year: "))
birth_m = int(input("month: "))
birth_d = int(input("day: "))

time_tuple = (birth_y, birth_m, birth_d, 0, 0, 0, 0, 0, 0)

detail_info = time.asctime(time_tuple)   # 将时间元组转换为日期时间字符串
print(detail_info)

detail_second = time.mktime(time_tuple)   # 将本地日期时间元组转换为新纪元秒数时间(UTC为准)

interval = (time.time() - detail_second) // (3600 * 24)
print("interval day:", interval)

# 电子钟 HH:MM:SS
while True:
    now = time.gmtime(time.time() + 8 * 3600)   # 也可以使用time.localtime(),返回当前时间元组 
    year = now[0]; month = now[1]; day = now[2]; hour = now[3]; minute = now[4]; second = now[5]; dayday = now[6]

    time.sleep(1)
    print("\r%2s:%2s:%2s   %s" %(hour, minute, second, dayday), end="")


---------------------------------------

系统模块 sys
  此模块保存系统的信息

变量
sys.path	模块搜索路径 path[0] 是当前脚本程序的路径名，否则为 ''
sys.modules	已加载模块的字典
sys.version	版本信息字符串
sys.version_info	版本信息的命名元组
sys.platform	操作系统平台名称信息
sys.argv	命令行参数 argv[0] 代表当前脚本程序路径名
sys.copyright	获得Python版权相关的信息
sys.builtin_module_names	获得Python内建模块的名称（字符串元组）

标准输入输出时会用到	
sys.stdin	标准输入文件对象，多用于input()
sys.stdout	标准输出文件对象,多用于print()
sys.stderr	标准错误输出文件对象, 用于输出错误信息

方法
sys.exit([arg])	退出程序，正常退出时sys.exit(0)
sys.getrecursionlimit()	得到递归嵌套层次限制（栈的深度）
sys.setrecursionlimit(n)	得到和修改递归嵌套层次限制（栈的深度）

示例:
import sys
# sys.argv: The list of command line arguments passed to a Python script
# sys.argv[0]: is the script name (it is operating system dependent whether this is a full pathname or not).
# sys.path: 模块搜索路径 path[0] 是当前脚本程序的路径名
# sys.getrecursionlimit(): randometurn the current value of the recursion limit.
# sys,setrecursionlimit(): set the recursion limit


标准输入数出文件
    sys.stdin   # 标准输入
    sys.stdout   # 标准输入
    sys.stderr   # 标准错误输出

示例:
sys.stdout.write("This is in Out stream.")
sys .stderr.write("This is in Error stream.")

# 从键盘读取数据,直到输入Ctrl+D文件结束符才停止
in_str = sys.stdin.read()   # 默认的标准输入时读取键盘
print(in_str)

说明:
    每一个python程序启动后,都会有以上三个文件


=====================================标准库模块=====================================

在 /usr/lib/python3.6 目录内


---------------------------------------

数学模块 math
变量
math.pi 圆周率
math.e 自然对数

math.ceil(x)	对x向上取整，比如x=1.2，返回2
math.floor(x)	对x向下取整，比如x=1.2，返回1
math.sqrt(x)	返回x的平方根
math.factorial(x)	求x的阶乘
math.log(x[, base])	返回以base为底x的对数, 如果不给出base,则以自然对数e为底, base**多少次方 = x 
math.log10(x)	求以10为底x的对数
math.pow(x, y)	返回 x**y (x的y次方)
math.fabs(x)	返回浮点数x的绝对值

角度和弧度degrees互换	
math.degree(x)	将弧度x转换为角度
math.radians(x)	将角度x转换为弧度

三角函数	
math.sin(x)	返回x的正弦(x为弧度)
math.cos(x)	返回x的余弦(x为弧度)
math.tan(x)	返回x的正切(x为弧度)
math.asin(x)	返回x的反正弦(返回值为为弧度)
math.acos(x)	返回x的反余弦(返回值为为弧度)
math.atan(x)	返回x的反正切(返回值为为弧度)


---------------------------------------

深拷贝和浅拷贝
浅拷贝 shallow copy
 示例:
   L = [3.1, 3.2]
   L1 = [1, 2, L]  # L1 = [1, 2, [3.1, 3.2]]
   L2 = L1.copy()  # 浅拷贝 L2 = [1, 2, [3.1, 3.2]]
   print(L1)
   print(L2)
   L1[2][0] = 3.14  # 改变L列表里的第0个元素
   print(L1)
   print(L2)

copy 模块
深拷贝 deep copy
  深拷贝是指在复制对象时,将对象的关联的对象也一同复制
  copy.deepcopy()
 示例:
import copy  # 导入复制模块
L = [3.1, 3.2]
L1 = [1, 2, L]  # L1 = [1, 2, [3.1, 3.2]]
L2 = copy.deepcopy(L1)  # 深拷贝 
print(L1)
print(L2)
L1[2][0] = 3.14  # 改变L列表里的第0个元素
print(L1)
print(L2)

注:
  深拷贝通常只对含有可变对象的对象进行复制, 不可变对象通常不变


keyword 查看关键字


---------------------------------------

随机模块 random
示例:
random.random()	返回一个[0, 1) 之间的随机实数
random.uniform(a,b)	返回[a,b) 区间内的随机实数
random.randrange([start,] stop[, step])	返回range(start,stop,step)中的随机数
random.choice(seq)	从序列中返回随意元素
random.shuffle(seq[, random])	随机指定序列的顺序(乱序序列）
random.sample(seq,n)	从序列中选择n个随机且不重复的元素
random.getrandbits(nbit)	以长整型的形式返回用nbit位来表示的随机数
random.seed(a=None)	用给定的数a设置随机种子,不给参数a则用当前时间设置随机种子


