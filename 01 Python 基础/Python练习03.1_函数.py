# %%
# 不同的传参形式
def fun1(a, b, c):
    """位置形参
        调用 fun1(1, 2, 3)
    """
    return a+b+c

def fun2(*args):
    """单星号元组形参
        调用 fun2([1, 2, 3])
    """
    return sum(args)

def fun3(**kargs):
    """双星号字典形参
        调用 fun3({1: "是1", 2: "是2})
    """
    s = 0
    for k, _ in kargs.items():
        s += k
    return s

def fun4(*, arg1, arg2):
    """关键字形参
        调用 fun4(arg1=111, arg2=222)
    """
    return arg1+arg2


def fun5(位置形参1, 位置形参2, /, *元组形参, 关键字形参1, 关键字形参2, **字典形参):
    """限位符/ 左边出现的是位置形参, 后面的可以依次有星号形参, 关键字形参, 双星号形参
       可以理解为元组形参是位置形参任意个形式, 二者区分比较困难, 要用限位符/, 字典形参是关键字形参的任意个形式
        调用 fun5(11, 22, (300, 400, 500), 关键字形参2=7, 关键字形参1=6, {"第一个": 8, "第二个": 9 })
    """
    s = 位置形参1 + 位置形参2 + sum(元组形参) + 关键字形参1 + 关键字形参2
    for _, v in 字典形参.items():
        s += v
    return s


# %%
# 不同的传参方式

def fun6(a, b, c):
    print("%d + %d + %d = %d" % (a, b, c, a+b+c))

# 位置传参
fun6(1, 2, 3)

# 关键字传参, 没有默认值, 必须全部给出
fun6(b=4, c=6, a=5)

# 序列传参
lst = [7, 8, 9]
fun6(*lst)

# 字典关键字传参
dit = {"a": 10, "b": 11, "c": 12}
fun6(**dit)


# %%
# 具有缺省值的参数, 必须放在位置参数后, 且依次存在, 调用时可以不向其传参
def fun7(a, b, c=10):
    print(f"{a}+{b}+{c}={a+b+c}")

fun7(4, 5)


# %%
# 递归实现斐波那契数列
def fib(n):
    """
        n表示数列的第几项
    """
    if n == 1 or n == 2:
        return 1
    return fib(n-2) + fib(n-1)

print(fib(4))
# %%
