函数 function
什么是函数
  函数是可以重复执行的语句块, 可以重复使用, 通常一个函数定义一定的功能
作用:
  1)用于封装可重复执行的语句,提高语句的可重用性
  2)定义用户级别的函数

函数的定义语句   def 语句
语法:
    def 函数名(参数列表):
        语句块
说明:
  函数的名字就是语句块的名称
  函数名的命名规则与变量名相同(必须为标识符)
  函数名是一个变量(不要轻易对其赋值)
  函数有自己的名字空间,要让函数处理外部数据最好用参数给函数传入数据
  函数如果不需要传入参数,则参数列表可以为空
  语句部分不能为空,如果为空需填充pass语句


函数的调用
  函数名(实际调用传递参数)
  注:实际调用参数 简称"实参" 
说明:
  函数调用是一个表达式
  如果函数内部没有return语句, 函数执行完毕后返回None对象
  如果函数需要返回其他的值对象, 需要用到return语句


return 语句
语法:
  return [表达式]
  注: []代表可以省略
作用:
  用于函数中, 结束当前函数的执行,返回到调用该函数的地方,同时返回一个对象的引用关系
说明:
  return语句后跟的表达式可以省略,省略后相当于return None, 即默认返回None
  如果函数内没有return语句,则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  函数的调用能返回一个对象的引用
  函数体中返回的数据, 有且仅有一个值, 如果是多个值, 可以使用容器类型的数据打包后返回


组包(打包)
  将多个数据自动组合为一个数据的过程
如在函数返回中
  def fun():
    return 1, 2, 3  # 将会组合为一个元组返回, 组包

拆包(解包)
  将一个数据拆分为多个数据的过程
如在赋值中
  num1, num2 = [1, 2]  # 将会依次将列表中的元素赋值给单独的变量
  k1, k2 = {'a': 1, 'b', 2}   # 将会把字典的键拆包赋值给单独的变量
所有的容器都可以拆包


--------------函数的属性--------------------

函数的属性

__name__ 属性
  用来记录函数名
说明:
  以双下划线"__"开头与结尾
  以下划线结尾的标识符通常代表Python的特殊变量(属性)
示例:
def example():
    pass
fn = example   # 将函数地址指向新变量fn
print("fn绑定的函数名是:", fn.__name__)
print("example绑定函数名是:", example.__name__)

__doc__ 属性
  用来记录文档的字符串
示例:
def example():
    """example函数的文档字符串"""
    pass
>>> help(example)
>>> print(example.__doc__)


---------------参数的传递-------------------

以某种形式传输一定格式的参数给函数

python 函数参数传递的方式
  1)位置传参
  2)序列传参
  3)关键字传参
  4)字典关键字传参

1)位置传参:
  实际调用传递参数(实参)的对应关系用形式参数(形参)的对应关系是按位置依次对应的
示例:
def example(a, b, c):
    pass    |  |  |
example(    1, 2, 3)   # 调用, 对应位置对应形参

2)序列传参
  指在函数调用过程中,用*将序列拆解后按位置进行传递的传参方式
示例:
def example(a, b, c):
    pass
lst = [1, 2, 3]
example(*lst)   # 调用, 传递一个列表, 序列都能这样, *告诉函数自动拆解元素按位传入

3)关键字传参 keyword argument
  关键字传参是指传参时,按照形参的名称给形参赋值
  实参和形参按名称进行分配
  能使用位置传参的, 一定也能使用关键字传参
示例:
def example(a, b, c):
    pass
example(b=7, c=1, a=11)   # 调用, 使用形参名赋值的方式传递

4)字典关键字传参
  是指实参为字典, 将字典用**拆解后进行关键字传参
  与形参赋值类似, 键为形参名, 值将被赋该键对应的值
示例:
  dic = {"a": 1, "b": 2, "c": 3}
  def example(a, b, c):
      pass
  example(**dic)   # 调用, **告诉函数自动拆解元素,


函数的综合传参
  函数的传参方式在能确定形参能唯一匹配到相应实参的情况,可以任意组合
说明:
  形参中的位置参数, 必须每一个参数都接收到实参, 否则报错
  位置传参和序列传参要先于关键字传参和字典关键字传参
  从左向右书写顺序 位置传参, 序列传参, 字典传参, 关键字传参
示例:
def example(a, b, c):
    pass
example(100, *(200, 300))
example(*[100, 200], 300)
example(*(100,), *[200, 300])
example(100, c=3, b=2)
example(*[100], **{"c":3, "b": 2})
example(**{"c": 3, "b": 2}, a=100)


可变类型作为函数的实参
  当一个可变类型作为函数的实参传入时, 此对象可以在函数内部将其改变,通常用来函数返回多个类型的数据
  其本质是将可变类型的地址传入函数, 在函数中操作该地址上的数据, 这意味着若发生更改, 指向该地址的所有变量其反映的内容都会变
  可变类型:
    list   dict   set    bytearray


函数的缺省参数
语法
  def 函数名(形参名1=默认值1, 形参名2=默认值2, ...):
      语句
说明:
  缺省参数必须出现在位置参数后
  缺省参数必须从右至左依次存在, 如果一个参数有缺省参数, 则其右侧的所有参数都必须有缺省参数  


函数的文档字符串
  函数内,第一行没有赋值给任何变量的是文档字符串
  此文档字符串可以用>>> help(函数名) 查看
示例:
def example():
    """一些说明"""
    pass


---------形参的形式----------

函数以一定格式接收传递过来的参数

函数参数的定义方式
  1)位置形参
  2)星号元组形参(收集多余的位置传参)
  3)命名关键字形参
  4)双星号字典形参(收集多余的关键字传参)
  5)斜杠仅限位置形参

1)位置形参
语法:
    def 函数名(形参名1, 形参名2, ...):
        语句块
示例:
  def example(a, b, c, d):   # a, b, c, d为位置形参
      return a + b + c + d

2)星号元组形参
语法:
    def 函数名(*元组形参名):
        语句块
作用:
  收集多余的位置传参
示例:
  def example(*argv):    # 定义元组传参
      for arg in argv:
          print(arg)

3)命名关键字形参
语法:
    def 函数名(*, 命名关键字形参列表)
    或
    def 函数名(*args, 命名关键字形参列表)
作用:
  所有的参数都必须用关键字传参或字典关键字传参
示例:
  def example(*, a, b, c):   # 定义基于命名关键字的形参
      pass
  example(a=1, b=2, c=3)   # 调用
  example(b=2, c=3, a=1)   # 调用 
  d = {"c": 3, "b": 2, "a":1}
  example(**d)   # 调用
  def example(*args, a, b, c):   # 定义基于命名关键字的形参, 可接受位置参数
      pass
  example(10, 20, 30, a=1, c=3, b=2)   # 调用

4)双星号字典形参
语法:
    def 函数名(**字典形参名):
        语句块
作用:
  用于收集多余的关键字传参
示例:
  def example(**kwargs):   # 双星号字典形参
      pass
  example(a=1, b=2, ...)   # 调用

5)仅限位置形参
语法:
    def 函数名(形参名1, 形参名2, / , * , 命名关键字形参列表):
        语句块
作用:
  / 左侧的形参不会被公开为可用关键字, 只能使用位置形参
示例:
    def exmaple(a, b, /):   # 斜杠限制左侧使用位置形参
        pass
    example(1, 2)   # 调用

函数的参数说明
  位置形参, 星号元组形参, 命名关键字形参, 双星号字典形参和缺省形参可以混合使用
函数参数自左至右的顺序为:
  位置形参, 星号元组形参, 命名关键字形参, 双星号字典形参
综合示例:
  def example(a, b, /, *args, c, **kwargs):
      print(a, b); print(args); print(c); print(kwargs)

  example(1, 2, 3, 4, ("hello", "python"), c="666", **{"必须": "前面加", "**": "以拆分"})   
  # 1 2
  # (3, 4, ('hello', 'python'))
  # 666
  # {'必须': '前面加', '**': '以拆分'}

说明: *args用于接收多的位置参数, 即a, b使位置用完后, 将多余的作为元组赋值给args
      **kargs用于接收多的关键字参数, 即c使用后, 将多余的作为字典赋值给kargs

可以接收任意位置传参和关键字传参的函数
  def func(*args, **kwargs):
      print(args, kwargs)

理解记忆
  使用中可以理解为, 星号元组形参就是位置形参的不限个数形式, 要放在位置形参的后面
  双星号字典形参就是关键字形参的不限个数形式, 要放在关键字形参的后面
  

-----------------函数也是变量----------------

函数变量
  函数名是变量,他在创建函数时绑定一个函数
  函数名存放的是函数所在的内存空间地址
  函数名()执行函数名所存放空间地址中的代码
  函数名可以像普通变量一样赋值, 赋值后的结果与原函数名作用是一样的
示例1:
  def func1():   # func为变量, func绑定一个函数
      pass
  f1 = func1   # 没有加(), 变量赋值
  f1()   # 执行函数
示例2:
  def func2():
      print("fun2")
  def func3():
      print("fun3")
  func2, func3 = func3, func2   # 交换变量绑定的值
  func2()   # 将会打印fun3

⬤ 一个函数可以作为另一个函数的参数传递
示例1:
  def example1():
      print("exmaple1")
  def example2(f):
      print(f)
      f()
  example2(example1)   # 将函数1作为参数传递给函数2
示例2:
  def goodbye(ls):
      for x in ls:
          print("Bye~", x)
  def hello(ls):
      for x in ls:
          print("Hi~", x)
  def operator(fn, ls):
      fn(ls)
  operator(goodbye, ["Siro", "Kizuna_ai"])
示例3:
  def myinput(fn):
      ls = [3, 1, 5, 9, 7]
      return fn(ls)
  print(myinput(max))   # 9
  print(myinput(min))   # 1
  print(myinput(len))   # 5
  print(myinput(sum))   # 25

函数作为参数传递的实质传递的是函数的地址

⬤ 函数可以作为另一个函数的返回值(一个函数可以返回另一个函数的引用关系)
示例:
  def get_op():
      s = input("input the operator: ")
      if s == "get_max":
          return max
      elif s == "get_min":
          return min
      elif s == "get_sum":
          return sum
  ls = [2, 4, 6, 8, 10]
  fun = get_op()   # 这里会选择绑定的函数
  print(fun(ls))

⬤ 函数的嵌套
  函数嵌套是指一个函数里用def语句来创建其他函数的情况
  这样可以在函数执行时动态创建一个函数
示例:
  def fn_outter():
      print("fn_outter")
      def fn_inner():   # 此函数是嵌套在fn_outter内的函数
          print("fn_inner")
      print("run_end")
  要在外调用嵌套的函数,可以让函数返回内嵌函数 return fn_inner, 然后使用变量绑定调用  


-----------------作用域-------------------

全局变量和局部变量
局部变量
  定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
  局部变量只能在函数内部使用
  局部变量在函数调用时被自动创建,在函数调用之后会被释放
      说明: 在函数内部的赋值语句不会对全局变量造成影响
全局变量
  定义在函数外部,模块内部的变量称为全局变量
  全局变量,所有函数都可以直接访问(但函数内不能将其直接赋值)


global 语句
作用:
  告诉解释器,global语句声明的一个或多个变量,这些变量的作用域为模块级的作用域,也称做全局变量
  全局声明(global)将赋值变量映射到模块内部的作用域
语法:
  global 变量1, 变量2, ...
global说明:
  1)全局变量如果要在函数内部被赋值,则必须经过全局声明(否则会被认为是局部变量)
  2)全局变量在函数内部不经过声明就可以直接访问(如果变量已经存在且关联一个对象)
  3)不能先声明局部变量,在用global声明为全局变量,此做法不符合规则
  4)global变量列表里的变量名不能出现在此作用域的形参列表里

nonlocal 语句
作用:
  告诉解释器, nonlocal声明的变量不是局部变量,而是外部嵌套函数内的变量
语法:
  nonlocal 变量名1, 变量名2, ...
说明:
  1)nonlocal语句只能在被嵌套的函数内部进行使用
  2)访问nonlocal变量将对外部嵌套函数作用域内的变量进行操作
  3)当有两层或两层以上函数嵌套时,访问nonlocal变量知识对最近的一层变量进行操作
  4)nonlocal语句变量列表里的变量名,不能出现在此函数的列表参数中


-----------------函数注释------------------

函数注释:
  Python3及之后版本才存在

def mydiv(a:"这是被除数", b:"这是除数") -> float:
  """这是函数注释的示例"""
  return a / b

-------------------
函数定义语句的完整语法

[@装饰器1]
[@装饰器2]
[...]
def 函数名([位置形参], [*元组形参], [命名关键字参数], [**字典形参]):
    """文档字符串"""
    语句块
