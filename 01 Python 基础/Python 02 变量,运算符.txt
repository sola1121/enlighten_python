变量
  关联一个对象的符号(标识符)
  特点:
    变量是存储数据的容器
    变量存储的数据是临时的
    变量在程序运行过程中是可以发生改变的

变量名(标识符)的命名方法
  变量名必须为字母或下滑线开头, 后跟字母或下划线或数字
  不能使用Python关键字(保留字)
变量名的正则表达式
  [_A-Za-z][_A-Za-z0-9]*

定义一个变量
  变量名 = 变量的值
  注: 变量一定是先定义, 在使用的

Python中 关联/绑定/引用 的含义
  Python 中变量没有类型,只有对象
  Python 中一个变量一定与一个对象相关联
  关联/绑定/引用都是指变量和一个对象的关联关系


全局变量和局部变量
局部变量
  定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
  局部变量只能在函数内部使用
  局部变量在函数调用时被自动创建,在函数调用之后会被释放
全局变量
  定义在函数外部,模块内部的变量称为全局变量
  全局变量,所有函数都可以直接访问(但函数内不能将其直接赋值)


===============================================================================

算数运算符
  + 加
  - 减
  * 乘
  / 除
  % 取余
  // 地板除 floordiv (python2.3后加入)
  ** 幂运算

/ 除法得到的数是浮点型数,不会丢弃小数部分. 数学意义上的除法.
// 地板除floordiv, 除的结果去掉小数部分向下取整(趋0取整) 
   如果整型相除结果为int整型, 如果浮点型相除结果为float浮点型
% 取余(取模)
** 幂运算

运算符的优先级
  1级         2级         3级
  **  -->  * / % //  -->  + -
() 括号分组子表达式, 括号内部的表达式先进行计算

混合类型自动升级
  1 + 2.14 返回类型为浮点型


复合赋值算数运算符
  **=
  *=  /=  %=  //=
  +=  -=
  :=

比较运算符:
  <   <=
  >   >=
  ==   !=   (python2 中有<>)


is 和 is not 运算符
is作用: 判断两个变量是否绑定同一个对象,当是同一个对象时,返回True, 否则返回False
is not作用: 与is相反
语法:
  x is y  或  x is not y   # 比较其内存块是否一致,可以使用函数id()查看
注:
  CPython整数-5到256永远存在内存中,不会释放并可重复使用
  若 x=100; y=100; x is y将会返回True

判断一个对象是否为None通常用is或is not运算符


布尔运算
运算符: not   and   or

布尔非操作 not
语法: not x
作用: 对x进行布尔取非

布尔与操作 and
语法: x and y   # x, y代表表达式
作用: 优先返回假值对象, 注意: 返回的是所给对象中的第一个假值对象,左至右
      当x的布尔值为False时, 返回x否则返回y

布尔或操作 or
语法: x or y
作用: 优先返回真值对象, 注意: 返回的是所给对象中的第一个真值对象,左至右
      当x为True时, 返回x否则返回y


in 和 not in 运算符
作用: 用于序列, 字典, 集合中, 用于判断某个值是否存在于容器中, 存在即返回True
not in 与 in 运算符返回结果相反
格式: 对象 in 序列


正负号运算符: +(正号)   -(负号)


一元运算符语法: + 表达式         - 表达式



位操作
位运算符:
&    位与
|    位或
^    位异或
<<   左移
>>   右移
~    求反


位与 &
格式:
  整数表达式x & 整数表达式y
作用:
  按位操作, 两个对应的为都为1, 则结果为1, 否则结果为0
示例:
  x = 10 & 12
  print(x)   # 8
解释:
  0b1010   # 10
& 0b1100   # 12
---------
  0b1000  


位或 |
格式:
  整数表达式x | 整数表达式y
作用:
  按位操作,两个对应的为只要有一个位为1,则结果为1,否则结果为0
示例:
x = 10
y = 12
z = x | y
print(z)   # 14
解释:
  0b1010   # 10
| 0b1100   # 12
---------
  0b1110  


位异或 ^
格式:
  整数表达式x ^ 整数表达式y
作用:
  按位操作,两个对应位不同,结果为1;两个分对应的位相同,结果为0
示例:
x = 10
y = 12
z = x ^ y
print(z)   # 6
解释:
  0b1010   # 10
^ 0b1100   # 12
---------
  0b0110  


左移运算符 <<
格式:
  整数表达式x << 整数表达式y
作用:
  将x的二进制值按位向左移动y位,低位补0
示例:
x = 0b110   # 6
z = x << 1
print(z)       # 12 --->   0b1100
print(x << 2)  # 24 --->  0b11000
print(x << 3)  # 48 ---> 0b110000
注: 左移一位相当于乘以2


右移运算符 >>
格式:
  整数表达式x >> 整数表达式y
作用:
  将x的二进制值按位向右移动y位,低位溢出丢弃
示例:
x = 0b110   # 6
6 >> 1   # ---> 0b011
6 >> 2   # ---> 0b001
6 >> 3   # ---> 0b000
注: 右移一位相当于除以2


求反 ~
格式:
  ~ 整数表达式
说明:
  按位求反, 0变1, 1变0

  -1 求反 00000000
  0 求反 -1(补码表示)
补码:
  计算机中用于表示负数的一种方式
原码:
  用来表示正数
负数的表示方式
  整数部分取反加1

-5的表示
5  --->   00000101  (原码)
1)取反
   --->   11111010  (反码)
2)加1
   --->   11111011  (补码)

示例:
  打印-5 从右到左的8位 11111011
L = list()
x = -5
for i in range(8):
    if x &(1<<i) != 0:
        L.append("1")
    else: 
        L.append("0")
L.reverse()
print(L)

