知识点
  1. 表达式
    1) if else表达式
    2) lambda表达式
  2. 语句
    1) 变量相关控制语句
    2) 函数相关语句
    3) 流程控制相关语句
    4) 作用域控制相关语句
    5) 模块相关语句
    6) 异常处理相关语句
    7) 生成器
    8) 类
    9) with语句


================================================================================

表达式   expression

  由一个数字或数字和运算符组合而成
作用
  让计算机做一些事情并返回结果


条件表达式
语法: 
  表达式1 if 真值表达式 else 表达式2   同C语言 ?: 运算符
  可以理解为 先选择表达式1 如果真值表达式成立 否则 选择表达式2
作用: 
  若果真值表达式的布尔环境值为True时, 执行表达式1, 并返回结果的引用关系, 否则执行表达式2, 并返回结果的引用关系
示例: a = a if a>0 else -a   # 返回绝对值


lambda 表达式 (又称匿名函数)
作用:
  创建一个匿名函数对象
  同def类似,但不提供函数名
语法:
  lambda [形参名1, 形参名2, ... ] : 表达式
  注:[]中内容可以省略
示例:
  def myadd(x, y):
      return x + y
  # 等同
  myadd = lambda x, y: x + y   # 简短的函数创建
  (lambda x : x**9)(100)   # 直接调用

  lambda x: not bool((x**2 + 1) % 5)   # 判断是否能整除5, 返回True或False

语法说明:
  1)lambda只是一个表达式,它用来创建一个函数对象
  2)当lambda表达式执行时,返回的是冒号(:)后,表达式的值
  3)lambda表达式创建的函数就只能包含一条表达式
  4)lambda比函数简单且可以随时创建和销毁,有利于减少程序的耦合度

注意:
  当返回内容过于复杂, 则无法使用lambda表达式实现


===============================================================================

语句  statement

Python以行为单位来解释语句
语句由一些表达式组成,通常一条语句可以独立执行来完成一部分事情并形成结果
  注: 一条语句建议写在一行内
多条语句写在一行内要用 分号 ; 分开

显式换行
  折行符 \ (反斜杠) 
  折行符必须放在一行的末尾来示意解释执行器,下一行也是本行的语句

隐式换行
  括号内的内容换行不需要添加折行符,通常叫做隐式换行
  ()   []   {}   """"""   ''''''


-----------------变量相关------------------

赋值语句
  赋值语句会创建变量或改变变量的绑定关系
语法:
  变量名 = 表达式
    或
  变量名1 = 变量名2 = 表达式
    或
  变量名1, 变量名2, ... = 序列
说明: 一个变量只能绑定一个对象,多个不同的变量可以同时绑定在一个对象上
序列赋值的语法:
  变量名1, 变量名2, ... = "AB ..."   # 赋值单个字符
  变量名1, 变量名2, ... = 对象1, 对象2, ...
  变量名1, 变量名2, ... = (对象1, 对象2, ...)
  变量名1, 变量名2, ... = [对象1, 对象2, ...]
  (变量名1, 变量名2, ...) = [对象1, 对象2, ...]
  [变量名1, 变量名2, ...] = (对象1, 对象2, ...)
  变量名1, *变量名 = (对象1, 对象2, ...)
示例:
  x, y = 100, 200   # x=100, y=200
  x, y = y, x   # 交换绑定关系


赋值表达式
  又名海象运算符, 将一个表达式的值赋值给变量, 该变量将被用以接下来的使用
语法:
  变量 := 表达式
示例:
  a := False
  print(a)   # False
  # 可以通过下面的复制表达式来让其更加简明
  print(a := True)   # True
  
  t = [True, False]
  while (a:=t[1]) == True:
    ...
    
  if (a:=t[0]) == True:
    ...
注意:
  赋值表达式后不能调用函数, 像 a:= sum([1, 2, 3]) 这样就会出错
  赋值表达式不能单独使用, 其结果变量必须在接下来的使用中参加
  赋值表达式的优先级不明确, 尽量在使用的时候对其添加括号


del 语句
作用:
  用于删除(delete)变量名, 如果与其绑定的对象的没有别的绑定关系, 则释放对象(由引用计数决定)
语法:
  del 变量名
示例:
  del 变量
  del 列表[index]
  del 字典[key]

del语句总结:
  1)删除变量
  2)删除列表中的元素
  3)删除字典中的键值对
  4)删除对象的属性


------------------函数-------------------

def 语句
  函数的定义语句
语法:
    def 函数名(参数列表):
        语句块
说明:
  函数的名字就是语句块的名称
  函数名的命名规则与变量名相同(必须为标识符)
  函数名是一个变量(不要轻易对其赋值)
  函数有自己的名字空间,要让函数处理外部数据最好用参数给函数传入数据
  函数如果不需要传入参数,则参数列表可以为空
  语句部分不能为空,如果为空需填充pass语句


pass 语句
作用: 通常用来填充语法空白
      pass又名空语句
语法:
  pass


return 语句
语法:
  return [表达式]
  注: []代表可以省略
作用:
  用于函数中, 结束当前函数的执行,返回到调用该函数的地方,同时返回一个对象的引用关系
说明:
  return语句后跟的表达式可以省略,省略后相当于return None
  如果函数内没有return语句,则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  函数的调用能返回一个对象的引用


------------------流程控制-----------------

流程控制语句
  条件控制
    if ... elif ... else ...
  循环控制
    while ... else ...
    for ... else ...


break 语句
作用: 
  用于循环语句(while和for)中
  用来终止当前循环语句的执行
语法:
  break
说明:
  当break执行后, 此循环语句break之后的语句将不再执行
  break语句通常和if语句组成使用
  break语句终止循环时,循环语句的else子句不会被执行
  break语句只能终止当前循环语句的执行,如果有循环嵌套时,不会跳出嵌套的外层循环
  break语句只能在循环语句(while/for)内部使用


continue 语句
作用: 
  用于循环语句(while和for)中, 不再执行本次循环内continue之后的语句, 重新开始一次新的循环
语法:
  continue
continue语句说明:
  1)在for语句中执行continue语句,将会从可迭代对象中取下一个元素绑定在变量后在次进行循环
  2)在while语句中执行continue语句,将会直接跳转到while语句的真值表达式处重新判断循环条件在决定是否开始新的循环


-----------------作用域-------------------

global 语句
作用:
  告诉解释器,global语句声明的一个或多个变量,这些变量的作用域为模块级的作用域,也称做全局变量
  全局声明(global)将赋值变量映射到模块内部的作用域
语法:
  global 变量1, 变量2, ...
global说明:
  1)全局变量如果要在函数内部被赋值,则必须经过全局声明(否则会被认为是局部变量)
  2)全局变量在函数内部不经过声明就可以直接访问(如果变量已经存在且关联一个对象)
  3)不能先声明局部变量,在用global声明为全局变量,此做法不符合规则
  4)global变量列表里的变量名不能出现在此作用域的形参列表里

nonlocal 语句
作用:
  告诉解释器, nonlocal声明的变量不是局部变量,而是外部嵌套函数内的变量
语法:
  nonlocal 变量名1, 变量名2, ...
说明:
  1)nonlocal语句只能在被嵌套的函数内部进行使用
  2)访问nonlocal变量将对外部嵌套函数作用域内的变量进行操作
  3)当有两层或两层以上函数嵌套时,访问nonlocal变量知识对最近的一层变量进行操作
  4)nonlocal语句变量列表里的变量名,不能出现在此函数的列表参数中


----------------模块相关-------------------

import 语句
语法:
  import 模块名1 [as 模块映射名1], 模块名2 [as 模块映射名2], ...
作用:
  将某模块整体导入到当前模块中

import 语句用法:
  模块名.属性名
  模块名.函数名(实际调用参数)
注: 属性是指模块内的变量

from import 语句
语法:
  from 模块名 import 模块的属性名 [as 模块的属性映射名1], 模块的属性名 [as 模块的属性映射名2], ...
作用:
  将某模块内的一个或多个属性导入到当前模块的作用域

from import * 语句
语法:
  from 模块名 import *
作用:
  将某模块的所有属性导入到当前模块


----------------异常处理-------------------

try 语句
两种语法:
  try-except: 语句
  try-finally: 语句

try-except 语句
try:
    可能触发异常的语句
except 错误类型1 [as 变量1]:
    异常处理语句1
except 错误类型2 [as 变量2]:
    异常处理语句2
...
except: 
    异常处理语句 other
else:
    未发生异常语句
finally:
    最终语句,不论是否发生异常,都会执行的部分

try-finally 语句
try:
    可能触发异常的语句
finally:
    最终语句,不论是否发生异常,都会执行的部分

raise 语句
作用:
  触发一个错误,让程序进入异常状态
语法:
    raise 异常类型
    或
    raise 异常对象

assert 语句(断言)
语法:
    assert 真值表达式, 错误数据(通常是字符串)
作用:
    当真值表达式为False时,用错误的数据创建一个AssertionError类型的错误,并触发此错误进入异常状态
    等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)


----------------生成器-------------------

yield语句
语法:
    yield 表达式
说明:
    yield 用于def函数中,目的是将此函数作为生成器函数使用
    yield 用来生成数据,供迭代器的next(iteration)函数使用


----------------类----------------------

类是用来描述对象属性和行为的工具, 用类可以创建对象(实例)

类的创建语句
class 类名(继承列表):
    "类文档字符串"
    实例方法(类内的函数叫做方法)
    类变量
    类方法(@classmethod)
    静态方法(@staticmethod)


---------------------------------------

with 语句
语法:
    with 表达式1 [as 变量1], 表达式2 [as 变量2], ...
说明:
    执行表达式,用as子句中的变量绑定对象,在执行内部操作
作用:
    使用于对资源访问的场合,确保使用过程中不管是否发生异常都会执行必要的"清理操作",并释放资源


=======================================


expression_stmt
                 | assert_stmt
                 | assignment_stmt
                 | augmented_assignment_stmt
                 | annotated_assignment_stmt
                 | pass_stmt
                 | del_stmt
                 | return_stmt
                 | yield_stmt
                 | raise_stmt
                 | break_stmt
                 | continue_stmt
                 | import_stmt
                 | global_stmt
                 | nonlocal_stmt

