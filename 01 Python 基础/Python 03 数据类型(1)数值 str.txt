Python的核心数据类型
    数字: 整数, 浮点数, 复数, 布尔型(bool)
  序列
    字符串: str
    列表: list
    元组: tuple
    字节串: bytes
    字节数组: bytearray

python优先使用不可变的数据类型,因为这样更加安全可靠
序列:
字符串 str
  不可变的，只能存储字符的，有先后顺序关系的容器类型
元组 tuple
  不可变的，可以存储任意类型的，有先后顺序关系的容器类型
字节串 bytes
  不可变的, 用于字节串
列表 list
  可变的，可以存储任意类型的，有先后顺序关系的容器类型
bytearray
  可变的,用于存储字节码,没有字面值,可以迭代查看


无序
字典 dict
  可变的, 没有先后顺序, 可迭代键值
集合 set
  可变的, 没有先后顺序且内部元素不重复
固定集合 frozenset
  不可变的, 没有先后顺序且内部元素不重复


容器类型一般都是可迭代对象

列表, 字典, 集合对象优缺点
  都是可变的容器类型
  列表的尾部插入速度比较快, 查中间插入和头插入数据速度慢
  列表有序
  字典添加, 删除, 修改速度快于列表
  集合的添加, 删除快于列表, 且不能存储重复元素

===============================================================================

空值对象 None
  None是一个表示不存在的特殊对象
  作用:
    用来占位
    变量解除绑定


整型数 int
  整型数是不带小数部分的数字
  -5   100   0
  整型数的字典值表示方式:
    十进制表示   decimalism
      10 999999999999999999
    二进制表示(0b开头, 后跟0~1)   binary
      0b1001
    八进制的表示(0o开头, 后跟0~7)   octonary
      0o177    0o11
    十六进制表示(0x开头, 后跟0~9, A~F, a~f)   hexadecimal
      0xcf998ed

浮点型数 float
  是带有小数部分的数字(小数部分可以是0)
  两种字面值表示方式
    小数:
      3.14   3.0   3.   0.14   .14
    科学计数法:
      格式:
        小数 e/E(正负号)指数
        如: 6.18E-1 (6.18 * 10**-1)  .314E1 (0.314 * 10**1)
    复数 complex:
      分为两部分:
        实部(real)
        虚部(image)
      Python中虚部以J或j结尾
      复数的字面值
        1j   2J   1+1j   1-1J   (-100+100J)

布尔型 bool
  用来表示真和假的两种状态类型
    True表示真(条件满足或成立)
    False表示假(条件不满足或不成立)
  说明:
  True的值为1
  False的值为0
Python语句中任何对象都可以用来表示真和假

bool(x)返回假值得情况:
  None 空值
  False 布尔假值
  0, 0.0, 0+0j 所有数字零
  "" 空字符串
  () 空元组
  [] 空列表
  {} 空字典
  set() 空集合

===============================================================================

字符串 str
作用: 是用来记录文本信息的
空字符串的字面值表示方法:
  ''   ""   ''''''   """"""
  注: 空字符串的布尔值为False
非空字符串字面值的表示方法:
  'hello'   "hello"   '''hello'''   """hello"""
单引号和双引号的区别
  单引号字符串内可以包含双引号
  双引号字符串内可以包含单引号
三引号字符串
  字符中的换行符'\n'
  三引号字符串中的换行会自动转换为换行符'\n'

字符的构造函数 str()

用转义序列代表特殊字符:
  字符串中常用字符 反斜杠\ 后跟一个字符代表特殊的含义
  \'     \"     \n     \\
  \t 水平制表符     \0 空字符(字符值为零)
  \r 返回光标至首行打印     \b 倒退一格打印         
  \v 垂直制表符     \f 换页     \a 响铃
  \xXX 十六进制     \uXXXX Unicode16 的十六进制值     \UXXXXXXXX Unicode32 的十六进制值

Linux中man ascii查看ascii编码
常用的ASCII编码
  字符     十进制     十六进制
  '0'        48       '0x30'
  'A'        65       '0x41'
  'a'        97       '0x61'
  '\0'       0        '0x00'
  '\n'       10       '0x10'
编码
  ascii 7bit 最多128个符号 0~127
  Unicode16  16bit 最多65536个符号 0~65535

raw 字符串
格式:
  r'字符串内容'
  r"字符串内容"
  r'''字符串内容'''
  r"""字符串内容"""
作用:
  让转义字符 \ 无效

字符串的运算
  算术运算符:
    +   +=   *   *=
+号运算符用于拼接字符串
*号运算符用于生成重复的字符串
  注: 字符串自能与整数相乘

字符串的比较运算符
  >   >=
  <   <=
  ==  !=
依次比较字符串中各字符的Unicode的编号值大小

字符串的索引操作
  索引 index
Python 字符串是不可以改变字符的序列
语法: 字符串[整数值]
语法说明: Python 序列都可以用索引(index)来访问序列中的对象
          Python 序列正向索引是从0开始的, 第二个索引为1,...最后一个索引值为len(s)-1
          Python 序列反向索引是从-1开始的, -1代表最后一个, -2代表倒数第二个, 以此类推, 第一个是-len(s)
索引的错误: IndexError 如越界

切片 slice
作用: 从字符串序列中取出相应的元素重新组成一个新的字符串
语法: 字符串[(开始索引b):(结束索引e)(:(步长s))]
      注: 小括号()括起部分代表可以省略
说明:
  开始索引 是切片切取的起始位置
  结束索引 是切片的终止点(但不包含终止点)
  步长 是切片每次获取完当前元素后移动的方向和偏移量.
       1)没有步长,相当于取值完成后右移动一个索引的位置(默认为1)
       2)当步长为正整数时,取正向切片,开始索引默认为0,结束索引默认为len(s)
       3)当步长为负整数时,取反向切片,开始索引默认为最后一个元素(-1).结束索引为第一个元素的前一个位置
          注: 正向,由左及右 反向,由右及左
示例:
  s = "ABCDE"
  s[-1:0:-1]   # "EDCBA"
  s[::-2]   # "ECA"

字符串格式化表达式
作用: 生成一定格式的字符串
运算符: %
语法格式:
  格式化字符串 % 参数值
  或
  格式化字符串 % (参数值1, 参数值2, ...)
说明:
  格式化字符串中'%'为占位符,后跟类型码,占位符的位置将用参数值替换
示例:
  fmt = "name: %s, age: %d"
  n = "jack"
  a = 19
  print(fmt % (n,a))

占位符 % 和类型码之间的格式语法
  %[-+0宽度.精度]类型码
    - 左对齐
    + 显示正负号
    0 补零
常用的占位符类型码: s  d  f  %  ...
示例:
  "%10d" % 100    # '       100'
  "%-10d" % 100   # '100       '
  "%+10d" % 100   # '      +100'
  "%7.2f" % 3.1415926   # '   3.14'
  "%010d" % 123   # '0000000123'

  fmt = "%%%ds" % num   # 如果num=8,等同于 '%8s'
