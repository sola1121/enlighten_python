Python中的7大数据类型
    数值类型
    布尔类型
    字符串
    元组
    列表
    字典
    集合


数据类型转换
    将一种类型转换为另一种类型

常见的类型转换方法
    int(x) : 将x转换为一个整数
    float(x) : 将x转换为一个浮点数
    bool(x) : 将x转换为一个布尔类型值
    complex(real [,imag]) : 创建一个复数, real为实部, imag为虚部
    str(x) : 将对象x转换为字符串
    repr(x) : 将对象x转换为表达式字符串
    eval(str) : 用来计算在字符串中的有效Python表达式, 并返回计算值
    tuple(s) : 将序列s转换为一个元组
    list(s) : 将序列s转换为一个列表
    chr(x) : 将一个整数转换为一个Unicode字符
    ord(x) : 将一个字符转换为他的ASCII整数值
    hex(x) : 将一个整数转换为十六进制字符串
    oct(x) : 将一个整数转换为八进制字符串
    bin(x) : 将一个整数转换为一个二进制字符串


当把浮点类型的值转换为整型, 将会舍弃小数点后的精度.

除0以外的整数, 转换为bool类型的数据, 将会为True, 0值为False

eval()函数主要针对字符串类型的数据, 将字符串中的数据转换为原数据类型
如
    num = eval(input("输入内容: ))   # 如果输入整数, 将会转换为整型, 如果输入浮点数, 将会转换为浮点类型
    num = eval(x + y)   # 将会向num返回表达式x+y的计算的值
eval()函数还可以转换表达式
如
    sum = eval("1+1")   # 会得到2
当使用字符串转换为字符串的时候, 将会报错
如
    s = eval("abc")   # 将字符串转换为对应的原数据类型, 还是字符串, 会报错


---------------------------------------------------------------

可变数据类型
    内存空间中的数据可以被修改的数据类型, 即能做到不修改引用地址的前提下修改数据的值
    list
    dict
    set
    bytearray

不可变数据类型
    内存空间中的数据不可以被修改的数据类型, 即不能做到不修改应用地址的前提下修改数据的值
    int
    float
    complex
    bool
    str
    tuple
    bytes

引用
  引用就是变量和数据之间的关联关系
引用地址
  Python中的引用地址, 是根据内存地址计算出来的唯一标识, 可以认为引用地址就是内存地址, 引用地址相同数据一定相同
  使用is运算符, 可以判断数据的引用地址是否相同, 使用id()函数可以查看变量的引用地址
可变类型传参传递的就是引用, 在函数中当对引用上的数据做了更改, 原先的数据也会改变
这里要区分用==或is运算符来判断是否数据相同, 前者是判断每个值是否相同, 后者是判断引用的地址是否相同

可变类型, 数据值相同, 类型也相同, 不一定引用地址相同, 也就不是同一个数据
不可变类型, 如字符串, 元组, 数, 数值相同,类型也相同, 引用地址就相同, 也就是同一个数据

每次修改可变数据类型, 都是在原地址上修改内容
不可对不可修改数据类型所在的内存地址上的数据进行修改, 如有元组t=(100,), 不可以t[0]=101
但是可以更改变量指向的内存地址, 如t=(101,), 这样会指向一个新的元组

