print("\x10")   # '\n'
print("\u0042")   # unicode 编码 'B'

整数的表示有 0b 二进制   0o 八进制   0x 十六进制

进制式字符的表示有 '\xXX' 十六进制   '\uXXXX' Unicode16的十六进制   '\UXXXXXXXX' Unicode32的十六进制

将整数 --> 转换成二进制字符串0b bin()   转换成八进制字符串0o oct()   转换成十六进制字符串0x hex()

ord(字符) 返回字符对应的Unicode编码值
chr(整数) 返回整数对应的Unicode字符


===============变量的绑定==============

对变量来说, 对象是共同拥有, 并不复制, 这是出于提升性能的需要, 如果需要将两个变量绑定不同的值相同的数据, 需要使用拷贝, 最好是深拷贝

L = [1, 2, 3, 4, 5]
L2 = L
L2.remove(5)
L与L2都是绑定在同一个列表上的, 所以对L2的操作也会反应在L上
要实现复制, 可以使用浅复制copy()或者切片
L2 = L.copy()  或  L2 = L[:]


浅拷贝 shallow copy  和  深拷贝 deep copy

浅拷贝
    是指在复制过程中, 只复制一层变量, 不会复制深层变量绑定的对象的复制过程
    这里的层可以理解为绑定,浅拷贝只是拷贝了绑定关系, 其深层对象依然相同
示例:
    L = [3.1, 3.2]
    L1 = [1, 2, L]
    L2 = L1.copy()   # 浅拷贝
这时的L1 == [1, 2, [3.1, 3.2]], L2 == [1, 2, [3.1, 3.2]]
    L[0] = 3.14
这时改变了列表的值, 在其绑定的变量与经浅拷贝的绑定的变量上, 其数值都会发生改变 L1 == L2 == [1, 2, [3.14, 3.2]]


深拷贝 copy.deepcopy(x) -> return a deep copy of x
    深拷贝是指在复制对象时,将对象的关联的对象也一同复制
示例:
    L = [3.1, 3.2]
    L1 = copy.deepcopy(L)   # 深拷贝, 生成列表副本, 将其绑定给L1
这时L ==  L1 == [3.1, 3.2]
    L[0] = 4
L改变了值, 但是L2并不会改变他的值, 因为L2并没有绑定在L所指的列表上了.  L == [4, 3.2]; L2 == [3.1, 3.2]


赋值
    创建变量与数据之间的关系

===============数据类型================

python中的不可变类型
    bool, int, float, complex, str, tuple, frozenset, bytes

python中的可变类型
    list, dict, set, bytearray









