字符串 str
作用: 是用来记录文本信息的


空字符串的字面值表示方法:
  ''   ""   ''''''   """"""
  注: 空字符串的布尔值为False
非空字符串字面值的表示方法:
  'hello'   "hello"   '''hello'''   """hello"""
单引号和双引号的区别
  单引号字符串内可以包含双引号
  双引号字符串内可以包含单引号
三引号字符串
  字符中的换行符'\n'
  三引号字符串中的换行会自动转换为换行符'\n'


字符的构造函数 str()
  即字符串在Python中的类型
  声明一个字符串对象
    s = str()
  通过字面量声明并定义一个字符串对象
    s = "hello"


用转义序列代表特殊字符:
  字符串中常用字符 反斜杠\ 后跟一个字符代表特殊的含义
  \'     \"     \n     \\
  \t 水平制表符     \0 空字符(字符值为零)
  \r 返回光标至首行打印     \b 倒退一格打印         
  \v 垂直制表符     \f 换页     \a 响铃
  \xXX 十六进制     \uXXXX Unicode16 的十六进制值     \UXXXXXXXX Unicode32 的十六进制值


Linux中man ascii查看ascii编码
常用的ASCII编码
  字符     十进制     十六进制
  '0'        48       '0x30'
  'A'        65       '0x41'
  'a'        97       '0x61'
  '\0'       0        '0x00'
  '\n'       10       '0x10'
编码
  ascii 7bit 最多128个符号 0~127
  Unicode16  16bit 最多65536个符号 0~65535


raw 字符串
格式:
  r'字符串内容'
  r"字符串内容"
  r'''字符串内容'''
  r"""字符串内容"""
作用:
  让转义字符 \ 无效


字符串的运算
  算术运算符:
    +   +=   *   *=
+号运算符用于拼接字符串
*号运算符用于生成重复的字符串
  注: 字符串能与整数相乘

字符串的比较运算符
  >   >=
  <   <=
  ==  !=
依次比较字符串中各字符的Unicode的编号值大小


字符串的索引操作
索引 index
语法: 字符串对象[整数值]
语法说明: Python 序列都可以用索引(index)来访问序列中的对象
         Python 序列正向索引是从0开始的, 第二个索引为1,...最后一个索引值为len(s)-1
         Python 序列反向索引是从-1开始的, -1代表最后一个, -2代表倒数第二个, 以此类推, 第一个是-len(s)
         如
          字符串    A  B  C  D  E
          正向索引  0  1  2  3  4
          反向索引 -5 -4 -3 -2 -1
索引的错误: IndexError 如越界
注意:
  Python 字符串是不可以改变字符的序列
  即不可以通过索引更改某个位置的字符, 修改会出现TypeError 错误
  一些看似更改字符串对象的操作, 都是在原字符串上, 生成了一个新的字符串


切片 slice
作用: 从字符串序列中取出相应的元素重新组成一个新的字符串
语法: 字符串对象[(开始索引b):(结束索引e)(:(步长s))]
      注: 小括号()括起部分代表可以省略
          省略开始索引, 默认位置从正向(或反向)字符串开始位置进行索引
          省略终止位置, 默认位置从正向(或反向)字符串最后位置结束索引
          省略步长, 默认步长为1
说明:
  开始索引 是切片切取的起始位置
  结束索引 是切片的终止点(但不包含终止点)
  步长 是切片每次获取完当前元素后移动的方向和偏移量.
       1)没有步长,相当于取值完成后右移动一个索引的位置(默认为1)
       2)当步长为正整数时,取正向切片,开始索引默认为0,结束索引默认为len(s)
       3)当步长为负整数时,取反向切片,开始索引默认为最后一个元素(-1).结束索引为第一个元素的前一个位置
          注: 正向,由左及右 反向,由右及左
示例:
  s = "ABCDE"
  s[2:4]   # "CD"
  s[-1:0:-1]   # "EDCBA"
  s[::-2]   # "ECA"


字符串格式化表达式
作用: 生成一定格式的字符串
运算符: %
语法格式:
  格式化字符串 % 参数值
  或
  格式化字符串 % (参数值1, 参数值2, ...)
说明:
  格式化字符串中'%'为占位符,后跟类型码,占位符的位置将用参数值替换
示例:
  fmt = "name: %s, age: %d"
  n = "jack"
  a = 19
  print(fmt % (n,a))

占位符 % 和类型码之间的格式语法
  %[-+0宽度.精度]类型码
    - 左对齐
    + 显示正负号
    0 补零
常用的占位符类型码: s  d  f  %  ...
示例:
  "%10d" % 100    # '       100'
  "%-10d" % 100   # '100       '
  "%+10d" % 100   # '      +100'
  "%7.2f" % 3.1415926   # '   3.14'
  "%010d" % 123   # '0000000123'

  fmt = "%%%ds" % num   # 如果num=8,等同于 '%8s'


占位符, 常应用于格式化字符串, 也可用于转换数据的表现方式
%s	字符串
%r	字符串，使用repr 而不是str
%c	整数转为单个字符
%u  无符号整数
%d	十进制整数
%o	八进制整数
%x	十六进制整数(字符a-F小写)
%X	十六进制整数(字符A-F大写)
%e	指数型浮点数(e小写),如2.9e+10
%E	指数型浮点数(E大写),如2.9E+10
%f, %F	浮点十进制形式
%g, %G	十进制形式浮点或指数浮点自动转换
%%	等同于一个%字符


str类型中的format()方法进行字符串的格式化操作
使用{}表示将填入的变量
例如
    id = "111222333"
    name = "xxxxxx"

    print("编号: {}, 姓名: {}".format(id, name))
    conbine = "{}, {}".format(id, name)


f形式的格式化输出
{变量名}的方式
例如
    id = "111222333"
    name = "xxxxxx"

    print(f"编号: {id}, 姓名: {name}")
    conbine = f"{id}, {name*2}"
