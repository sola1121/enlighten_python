列表 list
定义:
  列表是一种容器
  列表是序列的一种
  列表是由一系列特定元素组成的, 元素和元素之间可能没有任何关系, 但他们之间有先后顺序关系
  列表是可以被改变的序列(可变的三种数据类型之一), 即可以指定位的元素改变, 像str之类的数据类型一旦定义是无法改变的

创建一个空列表的字面值:
    L = []   # L 绑定空变量( [] 表示创建一个新的空列表)
创建一个非空列表的字面值:
    L = [1, "hello", [pi, 2, 3]]  # 创建一个空列表,内存放三个元素

列表的构造(创建)函数 list
  list() 生成一个空的列表, 等同于[]
  list(iterable)   # 可用迭代对象创建一个列表
示例:
    L = list()   # 创建一个空列表, 用L绑定

列表的算数运算
列表只能和列表进行运算(数据类型要相同)
算数运算符:
    +   +=   *   *=   (和字符串的运算符一样)
      + 用于拼接,规则同于字符串str的
      * 用于生成重复的列表,规则同于字符串str的

列表的比较运算
运算符: <  <=   >  >=    ==  !=
示例:
    序列中按序取出元素,进行比较,比较双方数据类型要相同
    a = [1, 2, 3]
    b = [1, 3, 2]
    b > a   # True
    b == a   # False
    [1, "two"] > ["one", 2]   # typeerror 类型错误

列表的in / not in 运算符
判断一个值是否存在于列表中,如果存在返回True,否则返回False(同字符串的类似)

列表的索引index和切片slice
索引:
  列表[整数表达式]
用法:
  等同于字符串的索引
  列表的索引分正向索引和反向索引, 规则与字符串完全相同

列表的索引赋值:
  列表是可变序列,可以通过索引赋值改变列表中的元素
示例:
    x = [1, 2, 3]
    x[1] = 4   # x变为[1, 4, 3]

列表的切片
  列表[(开始索引b):(结束索引e)(:(步长s))]
  开始索引 是切片切取的起始位置
  结束索引 是切片的终止点(但不包含终止点)
  步长 是切片每次获取完当前元素后移动的方向和偏移量.
       1)没有步长,相当于取值完成后右移动一个索引的位置(默认为1)
       2)当步长为正整数时,取正向切片,开始索引默认为0,结束索引默认为len(s)
       3)当步长为负整数时,取反向切片,开始索引默认为最后一个元素(-1).结束索引为第一个元素的前一个位置
          注: 正向,由左及右 反向,由右及左(列表切片的规则等同于字符串切片规则)

列表的切片赋值
  作用: 
    可以改变原列表的排序,可以插入和修改数据
  说明:
    切片赋值的等号运算符的右侧必须是一个可迭代对象(str, list, tuple, set, range(), ...)
示例:
  ■ L = [2, 3, 4]
    L[0:1] = [1.1, 2.2]    # L变为[1.1, 2.2, 3, 4], 0:1切片只取了第0位一个元素, 将此位置变为[1.1, 2.2] 
  ■ L = [2, 3, 4]
    L[3:] = [5, 6]   # 或L[len(L):] L变为[2, 3, 4, 5, 6], 在原先不存在的位置上插入了[5, 6]
  ■ L = [2, 3, 4]
    L[0:0] = [-2, -1]   # L变为[-2, -1, 2, 3, 4]
    L[1:1] = range(5, 7)   # L变为[2, 3, 5, 6, 4]
  ■ L = [2, 3, 4]
    L[1:1] = "AB"   # L变为[2, 3, 'A', 'B', 4]
    L[-1:-1] = "CD"   # L变为[1, 2, 'C', 'D', 4]
    L[3:3] = [5, 6]   # L变为[2, 3, 4, 5, 6] 在最后插入数据
  ■ L = [2, 3, 4]
    L = [::-1]   # 生成一个新的反转后的列表,然后用变量L重新绑定
    L[:] = L[::-1]   # 将原列表中的数据切片后用新的可迭代对象中的数据代替

切片注意事项:
    对于步长大于1的切片赋值, 可能会出现赋值错误
    对于步长大于1的切片赋值, 赋值运算符的右侧的可迭代对象的个数一定要等于切片切出的段数
示例:
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = [1.1, 3.3, 5.5]

del 语句 用于删除列表元素
    L = [1, 2, 3, 4, 5, 6, 7]
    del L[-1]   # L变为[1, 2, 3, 4, 5, 6]
    del L[0]   # L变为[2, 3, 4, 5, 6]
    del L[::2]   # L变为[3, 5]

列表和字符串比较:
  1) 列表和字符串都是序列,元素之间有先后顺序关系
  2) 字符串是不可变的序列,列表是可变的序列
  3) 字符串中每个元素只能是字符,而列表可以存储任意类型的元素
  4) 列表和字符串都是可迭代对象

字符串文本解析方法split() 和join()
  S.split(sep=None) 将字符串,使用sep作为分隔符分割S字符串,返回分割后的字符串列表,当不给定参数时,用空白字符作为分隔符分割
  S.join(iterable) 用可迭代对象中的字符串,返回一个中间用S进行分隔的字符串
注:
  S代表字符串
示例:
  s = "A,BB,CCC,DDDD"
  L = s.split(',')  # L = ['A','BB','CCC','DDDD']
  # 获取用户输入的英文单词个数:
  s = input("请输入:")  # "welcome to beijing"
  L = s.split()  # 不加参数将以空白字符作为分隔符
  print(len(L))  # 3

  path = ["C:", "Programe Files", "Python3"]
  '\\'.join(path)  # "C:\\Programe Files\\Python3"

  s = "a"
  s.split('a')   # ['', '']


使用循环进行列表的遍历
示例:
  # for循环配合容器类型使用
  for val in lst:
    pass
  
  # while循环配合索引遍历容器类型
  i = 0
  while i<len(lst):
    val = lst[i]
    ...
    i += 1 


列表的嵌套
  一个3*3的二维矩阵: lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  获取第2行第3列元素: lst[1][2] # 6
  遍历二维列表
    for rw in lst:
      for cl in rw:
        visit(cl)
  需要注意的是, 使用双循环遍历的话, 需要保证二维列表中的每个元素也是可迭代对象


列表推导式 list comprehension
作用:
  用可迭代对象和表达式组合生成列表
语法:
  [表达式 for 变量 in 可迭代对象]
  或
  [表达式 for 变量 in 可迭代对象 if 真值表达式]
表达式中的变量要与for内部的变量相同

列表推导式的嵌套
语法: 
  [表达式1 for 变量1 in 可迭代对象1 if真值表达式1 for 变量2 in 可迭代对象2 if 真值表达式2]


===============================================================================

元组 tuple
定义:
  元组是不可改变的序列,同list一样,元组可以存放任意类型的元素
  元组一旦定义其元素的个数及引用关系不会改变
  元组仅能用于查询
元组的表示方法:
  用小括号()括起来,单个元素括起来后加逗号 , 
  区分单个对象还是元组

创建一个空元组
    t = ()   # 空元组
    t = tuple()   # 空元组
使用字面量创建定义非空元组
    t = 200,
    t = (200,)
    t = (1, 2, 3)
    t = 100, 200, 300

元组的构造(创建)函数 tuple
    tuple() 生成一个空的元组, 等同于()
    tuple(iterable) 用可迭代对象生成一个元组
示例:
    t = tuple()   # 等同于 t = ()
    t = tuple(range(5))   # t = (0, 1 , 2, 3, 4)

元组的运算
  算数运算:
    +   +=   *   *=
      规则同列表和字符串相同
  比较运算:
    >   >=   <   <=   ==   !=
      规则同列表和字符串相同
  in / not in 运算:
    判断一个元素是否在元组内存在, 如果存在返回True, 否则返回False

索引 index 
  用法等同于列表的索引
  元组不能索引赋值

切片 slice
  用法等同于列表的切片
  元组的切片返回一个新的元组
  元组不能对切片赋值

元组的方法
  元组中的内部的元素不可增删改, 所以元组的方法主要是查询
  t = tuple(values)
  通过索引值进行元组的查询
  t.index(v[, begin[, end]]) 按值查询, 返回从左到右第一个对应元素的索引下标,在区间begin~end内查找v对应的索引值,当v不存在时,触发ValueError错误
  t.count(x) 返回元组中对应元素的个数
参考
>>> help(tuple) 
