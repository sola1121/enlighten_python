多态  polymorphic

什么是多态:
    字面意思: 多种状态
    多态是指有继承/派生关系的类中,调用基类对象的方法,实际能调用子类的覆盖方法的现象叫做多态
比如
    同样的行为(函数), 传入不同的对象, 得到不同的状态

说明:
    多态调用的方法与对象相关,不与类型相关
    Python的全部对象都只有运行时状态(动态), 没有C++/Java/GO中的静态编译(静态)

实现多态的三个条件
    有继承(定义父类, 定义子类, 子类继承父类)
    函数重写(子类重写父类的方法)
    父类引用指向子类的对象(子类对象传给父类对象调用者)


示例:
class Shape():
    def draw(self):
        print("shape.draw called.")

class Point(shape):
    def draw(self):
        print("write a point.")

class Circle(Point):
    def draw(self):
        print("wirte a circle.")

def my_draw(s: Shape) -> None:   # 同 def my_draw(s): , 写成提示用 父类对象 接收 子类对象 的形式  
    s.draw()    # 此处显现多态

shape1 = Circle()
shape2 = Point()
my_draw(shape1)   # wirte a circle.
my_draw(shape2)   # wirte a point.

注: Python的多态是动态的

根据类型来判断是用哪个实例方法(成员函数)

提示用父类对象作为函数参数, 就容易发生多态
在C++/Java中是需要必须使用父类作为函数的参数, 才能支持多态, 而Python中鸭子类型的概念, 只要像就行, 即有所需方法就行.


多态的优点
    在不改变框架代码的情况下, 通过多态语法轻松实现模块和模块之间的解耦合, 实现了软件系统的可拓展
继承相当于, 子可以复用父的东西
多态相当于, 父框架不做修改, 可以可拓展的使用子写的东西.


函数重写, 子类把父类的函数又重新写了一遍 父类与子类之间
函数重载, 在同一个类中, 函数名一样, 但是参数或者返回值不一样, 表现为在类中的同名方法的多态


多态本质是 回调函数

回调函数Callback Function, 是一个作为参数传递给另一个函数（通常称为“主调函数”或“主函数”），并在某个特定时刻由该调用函数执行的函数。
回调函数不是由其自身直接调用的，而是由其他函数在满足一定条件或完成特定任务后调用的。

示例
import tkinter as tk

def on_button_click():   # 回调函数
    print("按钮被点击了")

root = tk.Tk()
button = tk.Button(root, text="点击按钮", command=on_button_click)   # 主调函数所在
button.pack()
root.mainloop()

当用户去调用框架完成功能, 结果框架反过来调用用户写的代码.

任务的调用者和任务的编写者解耦合.

多态的本质就是通过函数入口地址做函数参数来实现的, 多态传入的子类对象对应的地址.
