继承 inheritance 和 派生 derived

继承 / 派生

继承的目的是延续旧的类的功能
派生的目的是在旧的类的基础上添加新的功能

作用:
    用继承/派生机制,可以将一些共有功能加在基类中,实现代码的共享
    在不改变超类的代码基础上,改变原有类的功能

名词:
    基类(base class)/超类(super class)/父类(father class)
    派生类(derived class)/子类(child class)

单继承的语法:
class 类名(超类名):
    ...
示例:
class Human:
    """此类来描述人类的共性
       语言 say
       两足行走 run
    """
    def say(self, what):
        print("said:", what)

    def run(self, speed):
        print("is running as %d m/s speed" %speed)

class Student(Human):
    def study(self, lan):
        print("student is studing:", lan)

class Teach(Human):
    def teach(self, lan):
        print("teacher is teaching:", lan)

s = Student()
s.run(2)
s.study("python")

继承说明:
任何类都直接或间接的继承自object类
object类是一切类的超类,cpython中其是用C变编译的

类的__base__属性
    __base__属性用来记录此类的基类

示例:
class A:
    pass
class B:
    pass
print(B.__base__)
print(A.__base__)
print(object.__base__)


覆盖 override
什么是覆盖:
    覆盖是指在有继承关系的类中,子类中实现了与基类(超类)同名的方法,在子类实例调用该方法时,实际调用的是子类中的覆盖版本,这种现象教覆盖
示例:
class A:
    def say_hello(self, com):
        print("你好," com)
    
class B(A):
    def say_hello(self, com):
        print("覆盖版本的函数:", com)   # 此方法将覆盖父类的方法

b = B()
b.say_hello("北京")   # 调用覆盖方法

a = A()
a.say_hello("中国")   # 调用A类方法


-------------通过子类调用父类的方法---------------

子类对象显式调用基类的方法的方式:
    基类名.方法名(实例,实际调用参数,...)

如:
b = B()
B.say_hello(b, "北京")   # 调用B类的say_hello() 方法
A.say_hello(b, "中国")   # 调用A类的say_hello() 方法

注: 前提是你必须要知道类名


super函数
    super(类型, obj) 返回绑定超类的super实例(要求obj必须为type类型实例)
    super() 返回绑定超类的实例,等同于:super(__class__, 实例方法的第一个参数),必须用在方法内
作用:
    返回基类的实例,用基类实例来间接调用其父类的方法

示例:
# 用来示意super函数间接调用父类方法

class A():
    def hello(self):
        print("A class")

class B(A):
    def hello(self):
        print("B class")
    def call_super_hello(self): 
        """这里想要调用父类的hello方法"""
        # self.__base__.hello()
        super(B, self).hello()   # 调用父类的hello
        super().hello()   # 无参调用,只能在方法中调用 等同于:super(__class__, self).hello

b = B()
b.hello()   # 如果想要b调用父类的方法?
A.hello(b)   # 此种方法可以调用A的,但得知道B类的父类名称,子类对象显式调用基类的方法
b.__class__.__base__.hello()   # 此种方法可以调用A的
super(B, b).hello()   # 此时用super间接的调用父类的hello方法
super(__class__, b).hello()

官方文档部分解释
 super() -> same as super(__class__, <first argument>)
 |  super(type) -> unbound super object
 |  super(type, obj) -> bound super object; requires isinstance(obj, type)
 |  super(type, type2) -> bound super object; requires issubclass(type2, type)
 |
 |  Typical use to call a cooperative superclass method:
 |  class C(B):
 |      def meth(self, arg):
 |          super().meth(arg)
 |  This works for class methods too:
 |  class C(B):
 |      @classmethod
 |      def cmeth(cls, arg):
 |          super().cmeth(arg)

-----------显示的调用基类的构造方法----------------

示例:

class Human():
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def infos(self):
        print("Name:", self.name, "Age:", self.age)

class Student(Human):
    def __init__(self, name, age, score)
        super().__init__(self, name, age)   # 调用父类的__init__方法, 这样的耦合性较高, 父类与子类的关联大
        self.score = score

    def infos(self):
        print("Name:", self.name, "Age:", self.age, "Score:", self.score)


h1 = Human("siro", 1)
h1.infos()


---------------------------------------

用于类的函数:
    issubclass(cls, class或tuple) 
    判断一个类是否继承自其它的类,如果此类cls是class或tuple中的派生类,则返回True,否则返回False

示例:
class A:
    pass
class B(A):
    pass
class C(B):
    pass

issubclass(C, B)   # True
issubclass(A, B)   # False
issubclass(C, (A, list))   # True
issubclass(C, (int, str))   # False

查看内建类的继承关系:
>>> help(__builtins__)


------------------多继承------------------

多继承 multiple inheritance
    多继承是指一个子类继承自两个或两个以上的基类
注: 继承是没有继承顺序的
语法:
    class 类名(超类名1, 超类名2, ...):
        ...
示例:
class Car():
    def run(self, speed):
        print("The Car is running as %s km/h1." % speed)
class Plane:
    def fly(self, height):
        print("The air is flying on the %s m sea level." % height)
class PlaneCar(Car, Plane):
    """planecar类, 同时继承汽车和飞机"""

p1 = PlaneCar()
p1.fly(10000)
p1.run(220)

多继承可能会引发的问题
    标识符(名字空间)冲突问题
    要谨慎使用多继承
示例:
# ai 写了一个类A
class A:
    def __init__(self):
        self.name = "A"

# luna 写了一个类B
class B:
    def __init__(self):
        self.name = "B"

# Akira感觉ai和luna写的两个类自己都可以用
class AB(A, B):
    infos(self):
        print(self.name)





