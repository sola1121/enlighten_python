不可变的数据类型
    bool, int, float, complex, str, tuple, frozenset, bytes
可变的数据类型
    list, dict, set, bytearray

值:
    None, False, True


运算符:
优先级表:
    **   幂运算
    +, -, ~   正号, 负号, 取反
    *, /, %, //   乘, 除, 求余, 地板除
    +, -   加法, 减法
    <<, >>   左移, 右移(用于位运算)
    &  交集
    ^  补集, 位异或运算
    |  并集
    < <= > >= == !=, is, is not, in, not in  比较, 身份测试, 成员资格测试
    not  布尔非
    and  布尔与
    or   布尔或
    if-else  条件表达式
    lambda   lambda表达式


表达式
    1
    1 + 2
    max(1, 2)
    max(1, 3) + min(100, 200)
    print("hello")
    [x for x in range(10)]   # 各种推导式
    True if x > y else False   # 条件表达式
用途:
  放在能用于表达式的地方
    赋值运算符的右边
    函数调用的()内等


语句 statments
  表达式语句
    print("hello")
    """abcd"""
  赋值语句
    a = 100
    a = b = c = 200
    x, y = 100, 200
  赋值表达式
    print(a:=True)
  if 语句
  while 语句
  break
  continue
  pass
  del


容器类型的运算
  加法 + 
    容器类型数据相加, 就是数据容器的合并, 即拼接
    容器类型的加法运算, 不会修改原来的容器, 而是产生了一个新的容器类型数据, 比如元组间也可以相加进行拼接, 返回一个新的元组
    注意, set和dict不能使用加法运算

  乘法 *
    容器类型乘以整数, 就是将容器重复整数次数并相加
    乘法不会修改容器的原有数据, 而是产生了一个新的数据容器
    因为乘法运算的本质就是将容器赋值多份, 再进行相加, 所以set和dict不能进行乘法运算
  
  in / not in
    判断元素是否存在于容器内
    当判断字典时, 判断的是键是否存在
    当判断字符串时, 可判断子串是否在字符串中


内建函数

  容器类相关
    len(x)   获取容器长度
    max(x)   容器中的最大值
    min(x)   容器中的最小值
    sum(x)   容器中值相加, 注意保持运算的数据类型一致
    any(x)   容器内部元素有任意一个不为空, 则为True, 否则返回False
    all(x)   容器内部元素都不为空, 则为True, 否则返回False

  类型转换相关
    bool(x)
    int(x, base=10)
    complex(r, i)
    str(x)
    list(x)
    tuple(x)
    dict(x)
    set(x)
    frozenset(x)

  数值相关
    abs(x)
    round(x)
    pow(x)

  字符串相关
    bin(x)
    oct(x)
    hex(x)
    ord(x)
    chr(x)
    ascii(x)

  可迭代对象相关
    range(x)
      
  输入输出函数
    input(x)
    print(...)

详见: >>> dir(__builtins__)


关键字

  del语句
    可以使用del删除列表, 字典中的数据
    不能删除集合中的数据, 因为集合中的数据无法指定获取
    不能删除字符串和元组中的数据, 因为字符串和元组是定义后便不可修改的类型

  查看全部的关键字
  >>> import keyword
  >>> keyword.kwlist

推导式有三种:
  列表推导式 []
  字典推导式 {键: 值 for ...}
  集合推导式 {}

