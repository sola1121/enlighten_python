抽象类（Abstract Class）
    抽象类是一种不能被实例化的类，只能作为其他类的基类（或称为父类）, 因此也常叫作抽象基类.
    抽象类可以包含抽象方法（没有具体实现的方法）和非抽象方法（有具体实现的方法）。
    抽象类的目的是为子类提供一个通用的接口和部分实现，使得子类能够共享某些方法或属性，同时强制子类实现特定的方法。

抽象方法
    没有具体实现的方法, 如方法内仅有pass语句

特点
    1) 不能实例化：抽象类不能直接实例化，即不能创建其对象。
    2) 包含抽象方法：抽象类可以包含抽象方法，这些方法只有声明，没有具体的实现，子类必须实现这些方法, 仅部分实现的子类, 也是抽象类.
    3) 可以包含非抽象方法：抽象类也可以包含带有具体实现的方法。
    4) 可以包含成员变量：抽象类可以包含各种类型的成员变量，包括常量、变量等。
    5) 可以有构造器：虽然抽象类不能被实例化，但它可以有构造器，这个构造器在子类的构造器中被调用。

用途
    1) 定义接口：抽象类可以定义一组抽象方法，作为子类必须实现的接口。
    2) 实现共有功能：抽象类可以提供一些共有方法的实现，这样子类就不必重复编写相同的代码。
    3) 强制子类实现特定方法：通过定义抽象方法，抽象类可以确保子类实现了特定的方法。

示例
class ABClass():
    def run(self):
        pass

    def test(self):
        self.run()


标准库 abc
    “abc"指的是"Abstract Base Classes”，即抽象基类。
    抽象基类是Python标准库中的一个特性，它允许你定义抽象类和方法，这样就可以创建一个具有某些方法的接口，而无需实现这些方法。
    抽象基类通常用于定义类层次结构中的公共接口，确保子类实现特定的方法。

    抽象类是通过abc模块中的ABC类和abstractmethod装饰器来创建的

示例
from abc import ABC, abstractmethod

class Vehicle(ABC):
    def __init__(self, brand):
        self.brand = brand
    
    @abstractmethod
    def start_engine(self):
        pass

    @abstractmethod
    def stop_engine(self):
        pass

    # 非抽象方法
    def get_brand(self):
        return self.brand
