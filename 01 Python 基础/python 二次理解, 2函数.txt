=============一等公民函数==============

函数的参数是从右向左读取的, 存在__code__类型或函数__defaults__中
缺省参数必须自右至左依次存在, 缺省参数的绑定对象存在于函数内, 同函数的生命周期一致

形参形式: *argv 用于收集多个位置传参, 在函数内将会以元组变量argv存在     **kargv 用于收集多个关键字传参, 在函数内将会以数组变量kargv存在


函数式编程
    是指用一系列函数解决问题

函数本身是对象, 可以赋值给变量, 赋值后变量绑定函数
允许将函数作为实参传入另一个函数
允许函数返回一个函数

函数式编程成的好处
    每一个函数完成细小的功能, 一系列函数的任意组合可以完成大的问题
    函数仅接收输入并产生输出, 不会影响其他全局变量的状态


-------------------
高阶函数   high order function

满足下列一个条件即为高阶函数
    1)函数接受一个或多个函数作为参数传入
    2)函数返回一个函数

python内建(builtins)的高阶函数
    map, filter, sorted
map函数:   映射
    map(func, iterable1, ...) 
作用    
    用函数对可迭代对象中的每一个元素作为参数计算出新的可迭代对象,当最短的一个可迭代对象不再提供数据时,此可迭代对象生成结束
    其返回一个生成器

filter函数:   筛选
    filter(func, iterable) 
作用
    筛选可迭代对象iterable中的数据,返回一个可迭代对象,此可迭代对象将对iterable进行筛选
    函数func将对iterable中的每个元素进行求值,返回False时将此数据丢弃,返回True,则保留此数据

sorted函数:   排序
    sorted(iterable, key=None, reverse=False)
参数说明: 
    iterable是一个可迭代对象
    key绑定函数,此函数用来提供一个排序的依据
    reverse标志用来设置是否降序排序(从大到小)
作用
    将原可迭代对象的数据进行排序, 生成排序后的列表

-------------------
递归 recursion
    函数直接或间接的调用自身

示例:
def f():
    f()   # 调用自己

# 函数间接调用自身
def fa():
    fb()

def fb():
    fa()

fb()

递归说明:
    递归一定要控制递归的陈述, 当符合某一条件是要终止递归
    几乎所有的递归都能用循环来代替
递归的优缺点
  优点:
    递归可以把问题简单化,让路径更为清晰,代码更为简洁
  缺点:
    递归因系统环境影响大,当递归深度太大时,可能会得到不可预知的结果

-------------------
闭包 closure
    将内嵌函数的语句和这些语句的执行环境打包在一起后,得到的函数对象称为闭包(closure)
  
  闭包必须满足一下三个条件
    1)必须有一个内嵌函数
    2)内嵌函数必须引用外部函数中的变量
    3)外部函数返回值必须是内嵌函数

示例:
def make_power(y):
    def fn():
        return x ** y
    return fn

pow2 = make_power(2)   # pow2拿到的就是闭包, 封装了y的fn函数
print("5的平方是:", pow2(5))

pow2.__code__.co_freevars 中记录了y, 可见y是作为一个自由变量传递给了pow2变量

-------------------
装饰器 decorators
    装饰器是一个函数, 这个函数的主要作用是包装别的函数或类
    包装的目的是在不改变元函数名的情况下gai8bian被包装对象的行为

函数装饰器 function decorators
    函数装饰器是指装饰器是一个函数, 传入的是一个函数, 返回的也是一个函数

通常格式:
def 装饰器函数名(参数): # 只有一个参数, 通常为函数或类
    语句块
    return 函数对象

# 用来装饰其他函数时:
@装饰器函数名
def 函数名(参数列表):
    语句块

示例:
def  mydeco(fn):
    def fx():
        print("hello world.")
    return fx

def hello():
    print("Nothing to say.")

hello()

-------------------
函数的文档字符串

语法:
def 函数名(参数列表):
    """函数的文档字符串"""
    函数语句块

说明:
    文档字符串通常用来说明本函数的功能和使用方法
    在交互模式下, 输入help(函数名)可以查看函数的文档字符串

由函数的__doc__属性绑定

-------------------
函数的属性
__doc__属性:
    函数内第一次未赋值给任何变量的字符串是此函数的文档字符串, 此字符串会自动赋值给函数的__doc__属性

示例:
def cba():
    '这是一个文档字符串'
    pass

print(cba.__doc__)   # 这是一个文档字符串

-------------------
函数定义语句的完整语法

[@装饰器1]
[@装饰器2]
[...]
def 函数名([位置形参], [*元组形参], [命名关键字参数], [**字典形参]):
    """文档字符串"""
    语句块



=============Python3 内建函数==========
数值对象的构造(创建)函数
函数 	说明
float(obj) 	用字符串或数字转换为浮点数, 如果不给出参数，则返回0.0
int(x, base=10) 	用数字或字符串转换为整数,如果不给出参数，则返回0
int() 	
complex(r=0.0, i=0.0) 	用数字创建一个复数(实部为r,虚部为i)
bool(x) 	用x创建一个布尔值(True/False)
预置(内建)的数值型函数
函数 	说明
abs(x) 	取x的绝对值
round(number[, ndigits]) 	对数值进行四舍五入, ndigits是小数向右取整的位数, 负数表示向左取整
pow(x, y, z=None) 	相当于x ** y 或 x**y % z
help() 查看函数帮助：

help函数
>>> help(abs)  # 查看abs函数的帮助

基本输入输出
基本输入 input
函数 	说明
input('提示字符串') 	返回输入的字符串(仅Python3)('提示字符串' 可以是空)
基本输出函数 print
函数 	说明
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False) 	将一系列的值以字符串形式输出到 标准输出设备上,默认为终端.
参数选项

选项的关键字参数为:
sep:   两个值之间的分隔符，默认为一个空格' '
end:   输出完毕后在流末尾自动追加一个字符串,默认为换行符'\n'
file:  流对象，默认为sys.stdout.
flush: 是否立即将流进行输出

字符串编码转换函数
函数 	说明
ord(c) 	返回一个字符的Unicode值
chr(i) 	返回i这个值所对应的 字符
整数转换为字符串函数
函数 	说明
hex(i) 	将整数转换为十六进制字符串
oct(i) 	将整数转换为八进制字符串
bin(i) 	将整数转换为二进制字符串
字符串构造函数
函数 	说明
str(obj='') 	将对象转换为字符串
range()函数
函数 	意义
range(stop) 	从零开始，每次生成一个整数后加1操作，直到stop为止（不包含stop)
range(start,stop[,step]) 	从start开始，每次生成一个整数后移动step，直到stop为止（不包含stop，且step可以是负数)
列表的构造函数
函数 	说明
list() 	# 生成一个空的列表 等同于 []
list(iterable) 	# 用可迭代对象创建一个列表
元组的构造(创建)函数tuple
函数 	说明
tuple() 	生成一个空的元组，等同于 ()
tuple(iterable) 	用可迭代对象生成一个元组
序列相关函数
函数 	说明
len(seq) 	返回序列的长度
max(x) 	返回序列的最大值的元素
min(x) 	返回序列的最小值的元素
sum(x) 	返回序列中所有元素的和
any(x) 	真值测试，如果列表中其中一个值为真值则返回True
all(x) 	真值测试，如果列表中所有值为真值则返回True
reversed(seq) 	返回反向顺序的迭代器对象
sorted(iterable, key=None, reverse=False) 	返回已排序的列表
dict的构造(创建)函数dict
函数 	说明
dict() 	# 生成一个空的字典 等同于 {}
dict(iterable) 	用可迭代对象初始化一个字典
dict(**kwargs) 	命名关键字传参形式生成一个字典
集合构造(创建)函数 set
函数 	说明
set() 	创建一个空的集合对象(不能用{}来创建空集合)
set(iterable) 	用可迭代对象创建一个新的集合对象
固定集合构造(创建)函数 frozenset
函数 	说明
frozenset() 	创建一个空的固定集合对象
frozenset(iterable) 	用可迭代对象创建一个新的固定集合对象
globals() / locals() 函数
函数 	说明
globals() 	返回当前全局作用域内变量的字典
locals() 	返回当前局部作用域内变量的字典
eval(), exec() 函数
函数 	说明
eval(source, globals=None, locals=None) 	把一个字符串source当成一个表达式来执行，返回表达式执行后的结果
exec(source, globals=None, locals=None) 	把一个字符串source当成程序来执行．
高阶函数 High Order Function
函数 	说明
map(func, *iterables) 	用函数和对可迭代对象中的每一个元素作为参数计算出新的可迭代对象,当最短的一个可迭代对象不再提供数据时此可迭代对象生成结束
filter(function, iterable) 	筛选可迭代对象iterable中的数据,返回一个可迭代器对象，此可迭代对象将对iterable进行筛选.函数function 将对iterable中的每个元素进行求值，返回False则将此数据丢弃，返回True，则保留此数据
sorted(iterable, key=None, reverse=False) 	将原可迭代对象的数据进行排序，生成排序后的列表
iterable 可迭代对象
key 函数是用来提供一个值,这个值将作为排序的依据
reverse 标志用来设置是否降序排序
dir函数
函数 	说明
dir([对象]) 	返回一个字符串列表
dir函数函数说明

    如果没有参数调用，则返回当前作用域内的所有变量的列表
    如果给定一个对象作用参数，则返回这个对象的所有变量的列表
        对于一个模块,返回这个模块的全部变量
        对于一个类对象，返回类对象的所有变量，并递归的基类对象的所有变量
        对于其它对象返回所有变量、类变量和基类变量

迭代器函数iter和next
函数 	说明
iter(iterable) 	从可迭代对象中返回一个迭代器,iterable必须是能提供一个迭代器的对象
next(iterator) 	从迭代器iterator中获取一下个记录，如果无法获取一下条记录，则触发 StopIteration 异常
迭代工具函数
函数 	说明
zip(iter1 [,iter2 [...]]) 	返回一个zip对象, 此对象用于生成一个元组，此元组的个数由最小的可迭代对象决定
enumerate(iterable[, start]) 	生成带索引的枚举对象，返回的迭代类型为索引-值对(index-value)对,默认索引从零开始，也可以用start指定
字节串的生成函数 bytes
函数 	说明
bytes() 	生成一个空的字节串 等同于 b''
bytes(整型可迭代对象) 	用可迭代对象初始化一个字节串
bytes(整数n) 	生成n个值为0的字节串
bytes(字符串, encoding='utf-8') 	用字符串的转换编码生成一个字节串
字节数组的生成函数 bytearray
函数 	说明
bytearray() 	创建空的字节数组
bytearray(整数) 	用可迭代对象初始化一个字节数组
bytearray(整型可迭代对象) 	生成n个值为0的字节数组
bytearray(字符串, encoding='utf-8') 	用字符串的转换编码生成一个字节数组
文件的打开函数
字符 	含义
open(file, mode='rt') 	用于打开一个文件，返回此文件流对象.
如果打开文件失败，则会触发OSError 错误!
如果要打开的文件不存在，则会触发FileNotFoundError 错误!
mode 模式字符的含义
字符 	含义
'r' 	以只读方式打开(默认)
'w' 	以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
'x' 	创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
'a' 	以只写文件打开一个文件，如果有原文件则追加到文件末尾
'b' 	用二进制模式打开
't' 	文本文件模式打开 (默认)
'+' 	为更新内容打开一个磁盘文件 (可读可写)

    缺省模式是 'rt'
    'w+b' 可以实现二进制随机读写，当打开文件时，文件内容将被清零
    'r+b' 以二进制读和更新模式打开文件,打开文件时不会清空文件内容
    'r+' 以文本模式读和更新模式打开文件,打开文件时不会清空文件内容

用于类型判断的函数
函数 	说明
isinstance(obj, class_or_tuple) 	返回这个对象obj 是否是 某个类的对象,或者某些类中的一个类的对象,如果是返回True,否则返回False
type(obj) 	返回对象的类型
	
对象的属性管理函数
函数 	说明
getattr(obj, name[, default]) 	从一个对象得到对象的属性；getattr(x, 'y') 等同于x.y; 当属性不存在时,如果给出default参数,则返回default,如果没有给出default 则产生一个AttributeError错误
hasattr(obj, name) 	用给定的name返回对象obj是否有此属性,此种做法可以避免在getattr(obj, name)时引发错误
setattr(obj, name, value) 	给对象obj的名为name的属性设置相应的值value, set(x, 'y', v) 等同于 x.y = v
delattr(obj, name) 	删除对象obj中的name属性, delattr(x, 'y') 等同于 del x.y
super函数
函数 	说明
super(type, obj) 	返回绑定超类的实例(要求obj必须为type类型的实例)
super() 	返回绑定超类的实例,等同于:super(class, 实例方法的第一个参数)，必须用在方法内
用于类的函数
函数 	说明
issubclass(cls, class_or_tuple) 	判断一个类是否继承自其它的类,如果此类cls是class 或 tuple中的一个派生子类则返回True,否则返回False
