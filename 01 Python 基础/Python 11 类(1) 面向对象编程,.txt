0. 知识体系
  1) 面向对象编程
  2) 类, 与创建类的实例对象
  3) 实例对象中的变量, 属性, 方法
  4) 类的变量, 属性, 类方法, 静态方法


面向过程编程
  它依赖于一系列的步骤或过程来执行任务。
  在面向过程编程中，程序被分解为函数或过程，这些函数或过程按照一定的顺序执行。
常见的面向过程编程的语言
  C/Pascal/汇编 ...

面向对象编程
  马克思中, 世界是物质的, 任何事物都不能单独存在, 都与世界中的其他事物处于一定的联系当中. 通过中介, 整个世界是相互联系的统一整体.
  面向过程编程是对其的应用, 首先需要对事物进行抽象, 然后组织对象和对象之间的关系, 来模拟实现交互的功能, 是对世界模拟
  在编程中基于 类class和对象object 实现

面向对象的编程语言的特征:
  继承, 封装, 多态
常见的支持面向对象编程的编程语言
  C++/Java/Python/Swift/C# ...


===================类, 对象===============

什么是对象
  对象是指现实中的物体或实体

什么是面向对象
  一切皆对象(世界万物由对象组成)
  把一切看成对象(实例)对象和对象之间建立关系

什么是类:
  类是用来描述对象属性和行为的工具, 用类可以创建对象(实例)

面向对象的三大特征
  封装, 隐藏对象的属性和实现细节, 仅对外公开接口, 控制程序中属性的读和修改的访问级别, 将抽象得到的数据和行为(或功能结合), 形成一个有机的的整体
       也就是将数据与操作数据的源代码进行有机的结合, 形成"类", 其中数据和函数都是类的成员.
       其目的是简化编程, 增强安全性
  继承, 子类继承父类的属性和方法, 使得子类对象(实例)具有父类的特征和行为 is-a
  多态, 不同类的对象对同一消息作出相应, 即同一消息可根据发送对象的不同而采用多种不同的行为方式.
       可以理解为 同样一个函数(消息)在不同场景下表现出不同形态(功能)


类的创建语句
class 类名(继承列表):
    "类文档字符串"
    实例方法(类内的函数叫做方法)
    类变量
    类方法(@classmethod)
    静态方法(@staticmethod)

类的创建说明:
  类名必须是标识符(与变量命名规则相同, 建议首字母大写)
  类名实质上就是变量,他绑定一个类
  类的定义最后需要加两个空行,已告诉解释器类的定义已经结束

类的作用:
  用类可以创建一个或多个对象(实例)
  类内定义的变量和方法能被此类的所有实例所共同拥有

创建一个类的对象
  对象名=类名([参数列表])

作用:
  1)创建这个类的实例对象,并返回此实例对象的引用关系,实例有自己的作用域和名字空间,可以为该实例添加变量(实例变量/属性)
  2)实例可以调用类中的方法
  3)实例可以访问类中的变量

定义一个简单的类
class One:
  ...
class Two():
  ...
class Three(object):
  ...
以上前两个都是省略了继承列表的, 最后一个显式的指出了类的超类, 这里的object是所有类的基类

示例:
class Dog():
    pass

dog1 = Dog()   # 类名() 构造函数, 用来创建实例对象
print(dog1)   # <__main__.Dog object at 0x7f456454645>

注: 类中的语句在初始化对象时将会被执行


===============实例变量,实例方法,实例属性==========

-------------------实例变量-----------------

实例变量(属性attribute)
  在Python中,每个实例可以有自己的变量,每个实例变量有自己独立的作用域
调用语法:
  实例.变量名

实例变量的赋值规则:
  首次为实例变量赋值则创建此实例变量
  再次为实例变量赋值则改变变量的绑定关系

示例:
class Dog():
    pass

dog1 = Dog()   # 类名() 构造函数, 用来创建实例对象
dog1.kinds = '秋田'   # 为dog1绑定的对象添加实例变量(属性)
dog1.color = 'yellow'    # 为dog1添加一个颜色属性
                       
dog1.color = 'black'   # 更改dog1的颜色属性

以上是在类实例对象创建后添加新的属性
也可以在类中设置其实例的属性, 一般在构造函数中定义


删除实例变量 del语句
  del 实例.变量名

del语句总结:
  1)删除变量
  2)删除列表中的元素
  3)删除字典中的键值对
  4)删除对象的属性


--------------------实例方法----------------

实例方法
语法:
class 类名(继承列表):
    def 实例方法名(self, 参数1, 参数2, ...):
        "方法的文档字符串"
        语句块

说明: 
  实例方法的实质是函数, 是定义在类内的函数
  实例方法的第一个参数代表调用这个方法的实例, 一般命名为"self"
  实例方法属于类的属性

实例方法的调用语法:
  实例.实例方法(调用传参)
  或
  类名.实例方法(实例, 调用参数)

示例:
def Dog():
    """这是犬类的定义
    分别包含种类名,主体颜色,等, 本类用于创建dog对象
    """
    print("对象初始化")   # 初始化对象时会执行

    def say(self):
        """犬类的叫声"""
        print("旺")
    
    def eat(self, food_name):
        """进食, 同时记录所吃"""
        print("狗狗在吃:", food_name)
        self.food = food_name

dog1 = Dog()   # 对象初始化
dog1.say()   # 调用方法, 打印 '旺'
dog1.eat("hello, world.")   # 调用有参数的方法, 打印 '狗狗在吃 hello, world.'
print("狗狗上次吃的是", dog1.food)   # 类的属性


----------------预置的实例属性----------------

预置的实例属性
__dict__属性
  每一个对象(实例), 通常都有__dict__属性, 它用于绑定一个储存此实例变量(属性)的字典

示例:
class A:
    pass

a = A()
a.name = "hello, world"
print(a.__dict__)   # {'name': 'hello, world'}


__class__属性
  __class__属性绑定创建此实例的类对象(类实例), 他指向类本体
作用:
  1)可以借助于此属性来创建实例的同类对象
  2)可以借助于此属性来访问类变量
示例:
class A:
    pass

a = A()
b = a.__class__()    # b也是A类的实例了


__doc__属性
  用于绑定类的文档字符串,可以用于help()中的显示


__slots__列表   slot: 插槽
作用:
  1)限定一个类创建的实例只能有固定的实例变量(属性)
  2)不允许对象添加此列表以为的实例属性(变量)
  3)访问用户因错写属性名称而发生程序错误
说明:
  含有__slots__列表的类所创建的实例对象没有__dict__字典,即此实例不用字典来存储实例变量(属性)
示例:
class Student:
    __slots__ = ['name', 'score']

s1 = Student()
s1.name = 'siro'
s1.lastname= 'hello'   # 报错, 不能创建实例变量


类的__base__属性
    __base__属性用来记录此类的基类


===============类变量,类方法,静态方法============

类变量,类方法,静态方法都是与类相关的,不与此类生成的实例相关

------------------类变量------------------

类变量:
  是指在class内创建的变量,此变量属于类,不属于此实例
  类变量可以通过该类直接访问
  类变量可以通过类的实例间接访问
  类变量可以通过此类的对象的__class__属性间接访问
注:其用于记录该类的属性
示例:
class Human:
    home = "earth"   # 类变量

Human.point = "233"   # 使用类在创建一个类变量
h1 = Human()
print(h1.home)   # 'earth'
h2 = Human()
h2.home = "China"   # 为h2绑定的对象添加home变量, 这是实例对象
print(h1.home)   # 'earth' 
print(h2.home)   # 'China'
h2.__class__.home = 'Beijing'
print(h1.home)   # Beijing


-------------------类方法-----------------

类方法 classmethod
    类方法是类内的方法,类方法是只能访问类变量的方法
    类方法需要使用@classmethod装饰器定义
    类方法的第一个参数是类,约写为cls
说明:
    1)类和实例对象都可以调用类方法
    2)类方法不能访问对象的实例变量
示例:
class A:
    v = 0   # 类变量
    @classmethod
    def set_v(cls, value):
        cls.v = value
    @classmethod
    def get_v(cls):
        return cls.v

A.set_v(100)
print(A.get_v())   # 输出通过类方法设置的类属性   

a = A()
a.v = 3000   # 创建实例变量v
print(a.get_v())   # 使用对象调用类方法, 打印0, 这是类变量v

注
  类方法的第一个参数指代的是所在的类, 通常约定用cls指代


实例方法和类方法的区别
class Car:
    def run(self, speed):   # 这是实例方法
        pass
    
    @classmethod
    def get_factory_address(cls):   # 这是类方法
        pass

注: 实例方法仅实例能使用, 是记录在实例对象中的方法, 类方法是对类操作的方法


------------------静态方法-----------------

静态方法 staticmethod   (Python独有)
  静态方法定义在类的内部,只能凭借类和实例调用
  静态方法需要使用@staticmethod装饰器定义
  静态方法与普通函数定义相同,不需要传入self实例参数和cls类参数
说明:
  1)类和实例对象都可以调用静态方法
  2)类方法不能访问对象的实例变量
示例:
class A:
    @staticmethod
    def myadd(a, b):
        return a + b

print(A.myadd(200, 300))

注: 静态方法与普通函数相同, 第一个参数也不是指代实例, 静态方法仅是定义在类的里面而已. 可用来防止重名.
