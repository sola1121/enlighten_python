封装 enclosure
    封装的目的是让使用者通过尽可能少的变量名(或属性)来访问对象
    封装是指隐藏类的实现细节,让使用者不关心这些细节
    Python的封装是假的(模拟的)封装

私有的实例变量和方法:
    Python中,以双下划线(__)开头,不以双下划线结尾的标识符为私有成员,这些属性或方法不能在类的外部进行访问, 且不能继承, 虽然是假封装

示例:
class Father():
    def __init__(self, na):
        self.__name = na
        self.__money = 0

    def infos(self):
        print("%s has %s $." %(self.__name, self__money))

    def __writebook(self):
        print("正在写笔记,别人无法调用.")

class Son(Father):
    def show_money(self):
    """调用父类的隐藏方法或属性会出错"""
        self.__writebook()   # 错误, 父类的隐藏方法,子类不能使用
        print("base class has %s $." % self__money)   # 错误, 父类的隐藏属性

f1 = Father()
f1.infos()   # 可以使用类中的非私有方法调用私有方法

print(f1.__name)   # 错误,私有属性不能在类外访问
f1.__writebook()   # 错误,私有方法不能在类外使用

