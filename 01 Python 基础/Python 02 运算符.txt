运算符
  算术运算符
  位运算符
  赋值运算符
  复合赋值算数运算符
  比较运算符
  逻辑运算符


运算符的优先级(有高到低)

  括号：()
  幂运算：**
  按位取反：~
  正号、负号：+、-
  乘、除、取模、取整除：* 、/、 %、 //
  加、减：+ 、-
  右移、左移：>> 、<<
  按位 “与”：&
  按位 “异或”，按位 “或”：^ 、|
  比较运算符：<= 、< 、>、 >=
  等于、不等于：==、!=
  赋值运算符：=、%=、/=、//=、-=、+=、*=、**=
  身份运算符：is、is not
  成员运算符：in、not in
  逻辑运算符：and or not

要善于使用圆括号(), 将需要优先计算的用圆括号包围, 避免出现混乱


算数运算符
  + 加
  - 减
  * 乘
  / 除
  % 取余
  // 地板除 floordiv (python2.3后加入)
  ** 幂运算

/  : 除法得到的数是浮点型数,不会丢弃小数部分. 数学意义上的除法.
// : 地板除floordiv, 除的结果去掉小数部分向下取整(趋0取整) 
     如果整型相除结果为int整型, 如果浮点型相除结果为float浮点型
%  : 取余(取模)
** : 幂运算


混合类型自动升级
  1 + 2.14 返回类型为浮点型


赋值运算符
  = 
  从右向左结合, 将右边的值赋予左边的变量
  可用于单个或多个的变量的定义
  如
    a, b = 3.14, "pi"

复合赋值算数运算符
  **=
  *=  /=  %=  //=
  +=  -=
  先执行算术运算, 再将结果赋值给左值

海象运算符
  :=


比较运算符:
  <   <=
  >   >=
  ==   !=   (python2 中有<>)
  比较左右, 返回True或False


is 和 is not 运算符
  is作用: 判断两个变量是否绑定同一个对象,当是同一个对象时,返回True, 否则返回False
  is not作用: 与is相反
  语法:
    x is y  或  x is not y   # 比较其内存块是否一致,可以使用函数id()查看
  注:
    CPython整数-5到256永远存在内存中,不会释放并可重复使用
    若 x=100; y=100; x is y将会返回True

判断一个对象是否为None通常用is或is not运算符


逻辑运算符(布尔运算)
  运算符: not   and   or

  布尔非操作 not
  语法: not x
  作用: 对x进行布尔取非

  布尔与操作 and
  语法: x and y   # x, y代表表达式
  作用: 优先返回假值对象, 注意: 返回的是所给对象中的第一个假值对象,左至右
        当x的布尔值为False时, 返回x否则返回y

  布尔或操作 or
  语法: x or y
  作用: 优先返回真值对象, 注意: 返回的是所给对象中的第一个真值对象,左至右
        当x为True时, 返回x否则返回y

  短路运算
    表达式1 and 表达式2
    当表达式1为False, 则and之后的将不会运算了, 整个表达式都返回False

    表达式1 or 表达式2
    当表达式1为True, 则or之后的将不会运算了, 整个表达式都返回True

  注意
    在逻辑运算中, 参加运算的左右值不一定是布尔类型的数据, 也可以是数字或者字符串
    如果参与逻辑运算, 则数值和字符串就会发生类型转换, 作为布尔类型的值进行处理
    Python中0, 空字符串, 空元组, 空列表, 空集, 空字典, None都看作False

    当逻辑运算两边是非布尔类型数据时, 则返回结果也不是布尔类型
    如
        3 and 4, 返回的最终结果要根据短路运算与类型转换来决定, 其会返回4
        3 or 4, 其会返回3
    原则是整个表达式最终的结果是由哪个表达式决定的, 则最终结果就返回谁


in 和 not in 运算符
  作用: 用于序列, 字典, 集合中, 用于判断某个值是否存在于容器中, 存在即返回True
  not in 与 in 运算符返回结果相反
  格式: 对象 in 序列


正负号运算符: +(正号)   -(负号)


一元运算符语法: + 表达式         - 表达式


位操作
  位运算符:
    &    位与
    |    位或
    ^    位异或
    <<   左移
    >>   右移
    ~    求反


位与 &
格式:
  整数表达式x & 整数表达式y
作用:
  按位操作, 两个对应的为都为1, 则结果为1, 否则结果为0
示例:
  x = 10 & 12
  print(x)   # 8
解释:
  0b1010   # 10
& 0b1100   # 12
---------
  0b1000  


位或 |
格式:
  整数表达式x | 整数表达式y
作用:
  按位操作,两个对应的为只要有一个位为1,则结果为1,否则结果为0
示例:
x = 10
y = 12
z = x | y
print(z)   # 14
解释:
  0b1010   # 10
| 0b1100   # 12
---------
  0b1110  


位异或 ^
格式:
  整数表达式x ^ 整数表达式y
作用:
  按位操作,两个对应位不同,结果为1;两个分对应的位相同,结果为0
示例:
x = 10
y = 12
z = x ^ y
print(z)   # 6
解释:
  0b1010   # 10
^ 0b1100   # 12
---------
  0b0110  


左移运算符 <<
格式:
  整数表达式x << 整数表达式y
作用:
  将x的二进制值按位向左移动y位,低位补0
示例:
x = 0b110   # 6
z = x << 1
print(z)       # 12 --->   0b1100
print(x << 2)  # 24 --->  0b11000
print(x << 3)  # 48 ---> 0b110000
注: 左移一位相当于乘以2


右移运算符 >>
格式:
  整数表达式x >> 整数表达式y
作用:
  将x的二进制值按位向右移动y位,低位溢出丢弃
示例:
x = 0b110   # 6
6 >> 1   # ---> 0b011
6 >> 2   # ---> 0b001
6 >> 3   # ---> 0b000
注: 右移一位相当于除以2


求反 ~
格式:
  ~ 整数表达式
说明:
  按位求反, 0变1, 1变0

  -1 求反 00000000
  0 求反 -1(补码表示)
补码:
  计算机中用于表示负数的一种方式
原码:
  用来表示正数
负数的表示方式
  整数部分取反加1

-5的表示
5  --->   00000101  (原码)
1)取反
   --->   11111010  (反码)
2)加1
   --->   11111011  (补码)

示例:
  打印-5 从右到左的8位 11111011
L = list()
x = -5
for i in range(8):
    if x &(1<<i) != 0:
        L.append("1")
    else: 
        L.append("0")
L.reverse()
print(L)

