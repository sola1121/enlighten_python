方法重写: 子类不想原封不动的继承父类方法,而是想做一定的修改


------------------函数重写-----------------

函数重写 overwrite
什么是函数重写：
    让自定义的类生成的对象（实例）向内建对象一样进行内建函数操作

对象转字符串函数的重写
    repr(obj) 返回一个能代表此对象的表达式的字符串, 通常: eval(repr(obj)) = obj    represent: 代表; 表现
        类似type返回的, 是给解释器看的

    str(obj) 通过给定的对象返回一个字符串(这个字符串通常是给人阅读的)

注: repr(obj) 函数和str函数都是返回一个对象的字符串对象转字符函数的重写方法:
    repr() 函数的重写方法:
        def __repr__(self):
            ...

    str() 函数的重写方法:
        def __str__(self):
            ...
    
    注: 如果没有__str__(self)方法,则返回repr(obj)函数结果替代
示例:
# 重载str()函数对应的: __str__(self): 方法
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __str__(self):
        """此方法会重写str(obj)所对应的 def __str__(self) 方法"""
        s = "%s is %s years old now." %(self.name, self.age)
        return s

stu = Student('siro', 1)
print(stu)   # siro is 1 years old now.
print(str(stu))   # siro is 1 years old now.

注: 没有str方法会调用repr函数，repr函数在类中也是可以通过def __repr__():重载

内建函数重写
__abs__   abs()函数
__len__   len()函数
__max__   max()函数
__min__   min()函数
__any__   any()函数
__all__   all()函数
__reversed__   reversed()函数
__round__   round()函数
__iter__   iter()函数
__next__   next()函数
__iadd__(self, other)  +=
__imul__(self, other)  *= 
...
以此方式递推

只有在类对象中定义了的函数才能拿出来对类对象进行直接的操作. 当然,算法得自己写

数值类型函数的重写
__int__   int()函数
__float__   float()函数
__complex__   complex()函数
__bool__   bool()函数

在一般能使用内建函数做相应对象类型处理了的类中,一般都是有重载了相应的内建函数的,如可以使用help(list)方式查看

bool测试的重写
格式:
    def __bool__(self):
作用:
    用于bool(obj)函数取值
    用于if语句的真值表达式中
    用于while语句的真值表达式中
说明:
    当没有__bool__(self)时, 真值测试将取__len__(self)方法的值来测试布尔值,如果没有__len__(self)方法,则直接返回True
示例:
"""__bool__(self)方法的使用
此示例的类为MyList, 用于仿制内建的list类
"""
class MyList:
    def __init__(self, iterable=[]):
    """初始化方法,用可迭代对象iterable来创建一个列表
    用实例变量data来绑定此列表,以备以后使用
    """
        self.data = [x for x in iterable]   # 列表表达式, data是个列表
    
    def __repr__(self):
        return "MyList(%r)" %self.data

    def __bool__(self):
        # 如果data绑定的列表长度为0,则返回假值
        if len(self.data) == 0:
            return False
        # 如果data列表里所有值都为假返回假
        # 只要有一个true就返回True
        for x in self.data:
            if x:
                return True
        else:
            return False


myl = MyList("ABCD")
print(myl)   # MyList(['A', 'B', 'C', 'D'])

lst = MyList([])
print(lst)
print("bool(lst)的值为:", bool(lst))

if lst:   # 此处等同于bool
    print("lst is True.")
else:
    print("lst is False.")


