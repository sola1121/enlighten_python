-------------------
模块 module
    模块是一个包含有一系列变量, 函数, 类等组成的程序组
    模块是一个文件, 模块文件通常以.py结尾

作用
    1)让一些相关的变量, 函数, 类等有逻辑的组织在一起, 使逻辑结构更加清晰
    2)模块中的变量, 函数和类可提供给其他模块使用

模块的分类
    内建模块(builtins), 在解释器的内部可以直接使用
    标准库模块, 安装python时已安装且可直接使用
    第三方模块(通常为开源), 需要自己安装
    用户自己编写的模块(可以作为其他人的第三方模块)


-------------------

import xxx(模块名)   # 去哪里找xxx.py ?
1)程序运行的当前路径(运行时路径: pwd命令返回的路径)
2)sys.path提供的路径
    sys.path是一个列表,里面放的是模块的搜索路径
3)搜索内建模块


模块加载过程
    在模块导入时, 模块所有的语句都会执行
    如果一个模块已经导入,则在次导入时不会重新执行模块内的语句

建议:
    对于自己常用的外部模块或包, 如果可以创建一个目录,并将此添加到sys.path中,并将模块或包放入该目录,之后便可以直接import了


模块只在一次执行中加载一次, 如果模块发生了改变,需要重新加载,可以使用imp.reload(module)重新加载


模块被导入和执行的过程
    1)先搜索相关路径找到模块(.py)
    2)判断是否由此模块对应的.pyc文件, 如果没有此文件,则用py文件生成相应的.pyc文件再进行加载
    3)如果文件已经存在,则判断.pyc文件和.py文件的修改时间,再决定是否重新生成.pyc文件

模块的编译 compile
          编译           解释执行
    mymod --->> mymod.pyc --->> python3 


模块的文档字符串
    模块内第一行没有被赋予变量的字符串为文档字符串, 其可以通过help(module)查看

-----模块的属性----
__doc__属性    
    模块的文档字符串绑定在模块的__doc__变量属性上

__file__属性
    用来绑定模块对应的文件路径名

__name__属性
    1)记录模块名
    2)用来判断是否为主模块
当模块作为主模块(也就是第一个运行的模块)运行时, __name__绑定'__main__'
当模块不是猪模块时,模块为名为去掉后缀的文件名

__all__列表
    模块中的__all__列表是一个用来存放可导出属性的字符串列表
    作用:
        当用from import * 语句导入模块时(只对该语句有用), 只导入__all__列表内的属性
示例:
__all__ = ["func1", "func2", "var1", "var2"]   # form import * 只能导入__all__中所记录的变量名, 这个可以防止导入所有时变量名冲突


模块的隐藏属性
    模块中以单下划线"_"开头的属性, 在使用 from xxx import * 语句在导入时将不被导入, 通常称这些属性为隐藏属性

--------------------包-----------------
包(模块包)   package
    包是将模块以文件夹的组织形式进行分组管理的方法

命名包:
    文件夹中有__init__.py

远程包:
    可以直接使用网站中提供的包, 导入一个网址

作用:
    1)将一系列模块进行分类管理,有利于防止命名冲突
    2)可以在需要时加载一个或部分模块而不是全部模块

包示例:
mypackage/
    __init__.py
    menu.py
    games/
        __init__.py
        contra.py
        supermario.py
        tanks.py
    office/
        __init__.py
        excel.py
        word.py
        powerpoint.py

包的导入语法
    import 包名 [as 包别名]
    import 包名.模块名 [as 模块别名]
    import 包名.子包名.模块名 [as 模块新名]

    from 包名 import 模块名 as 模块别名
    form 包名.子包名 import 模块名 [as 模块别名]
    from 包名.子包名.模块名 import 属性名 [as 属性新名]

    form 包名 import * 
    form 包名.模块名 import *


__init__.py文件
    是常规包内必须存在的文件, __init__.py会在导入包时被自动调用
作用
    1)编写此包内容
    2)在内部添加包的文档字符串
    3)在__init__.py文件内可以加载此包所依赖的其他模块

包中的__all__列表
作用:
    用来记录此包中有哪些子包或模块需要导入
    当用from 包 import * 语句导入时, 只查找__all__中的模块或子包
说明:
    __all__列表只在from xxx import *语句时起作用
    会将__all__列表中的内容导入


当子包或子包内的模块被导入时, 上一层的包也会被先导入
例如:
import thePackage.games.tanks   # 实质会先导入thePackage, 在导入games, 再导入tanks


包的相对导入
    包的相对导入是指包内的模块的相互导入

语法:
    from 相对路径包或模块 import 属性或模块名
    或
    from 相对路径包或模块 import * 
相对路径:
    在 from xxxx import语句中, xxxx部分可以使用相对路径
    . 代表当前目录
    .. 代表上一级目录
    ... 代表上二级目录
    .... 以此类推
    注: 
        1) 相对导入时不能超出包的外部
        2) 相对导入要避免循环导入


