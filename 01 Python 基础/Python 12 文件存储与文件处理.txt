什么是文件:
    文件是数据管理和数据存储的单位
    文件通常用来长期存储数据
file 
I/O (input/output)
内存 ---> 外部设备(output)
    write ---> read
外部设备 ---> 内存(input)
    read <--- write

文件的操作顺序:
    1) 打开文件 open --> read/write 
    2) 读写文件
    3) 关闭文件

文件的打开函数
    open(file_name, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    例
        fp = open(file, mode='rt') 用于打开一个文件, 返回此文件流对象,如果打开文件失败,则会触发IOError错误
注: 其使用的是操作系统的内核
    由操作系统提供的文件读写方式(操作系统提供的API)
        文本读写方式
        二进制读写方式

文件关闭方法
    file.close()

示例:
try:
    # 打开文件, 用file绑定, file为io对象
    file = open("filename.py", 'rt')
    # 此处用来读写文件
    # ...

    # 关闭文件
    file.close()
except IOError:
    print("Error")

文件读写的模式
‘r’（读取模式）: 这是默认模式，用于读取文件内容。如果文件不存在，将引发异常。
‘w’（写入模式）: 用于写入文件。如果文件已存在，其内容将被覆盖。如果文件不存在，将创建新文件。
‘x’（独占创建模式）: 用于创建新文件。如果指定的文件已存在，将引发异常。
‘a’（追加模式）: 用于在文件末尾追加内容。如果文件不存在，将创建新文件。
‘+’（更新模式）: 当与r、w或a结合使用时，允许读写文件。

文本模式
'r' 只读模式(默认), 如果文件不存在, 则抛出FileNotFoundError   (read)
'w'	写入模式, 如果文件存在，则将其内容清空；如果文件不存在，则创建新文件。  (write)
'x'	独占创建模式, 如果文件已存在，则抛出FileExistsError；如果文件不存在，则创建新文件。   
'a'	追加模式, 如果文件存在，则在文件末尾追加内容；如果文件不存在，则创建新文件。  (append)
'r+': 读写模式。如果文件不存在，则抛出FileNotFoundError。
'w+': 读写模式。如果文件存在，则将其内容清空；如果文件不存在，则创建新文件。
'a+': 读写追加模式。如果文件存在，则在文件末尾追加内容；如果文件不存在，则创建新文件。
二进制模式, 同上
'rb': 以二进制格式只读打开文件。
'wb': 以二进制格式写入文件。
'xb': 以二进制格式独占创建并写入文件。
'ab': 以二进制格式追加写入文件。
'rb+': 以二进制格式打开文件用于读写。
'wb+': 以二进制格式打开文件用于读写。
'ab+': 以二进制格式打开文件用于读写追加。

注: t(文本)和b(二进制)不能同时存在, 只有以文本方式或以二进制方式打开两个读写方式

文本模式和二进制模式的主要区别在于：
    在文本模式下，Python会根据系统默认的编码（如UTF-8）来解码或编码文件内容。
    此外，它还会处理平台特定的行结束符（例如，在Windows上为\r\n，而在Unix/Linux上为\n）。
    其处理的内容将作为str类型来处理.
    在二进制模式下，文件内容不会被解码或编码，而是以字节的形式进行读写。这对于非文本文件（如图像、音频文件等）是必要的。
    不需要在指定encoding参数.
    其处理的类型将作为bytes类型来处理.


文件流对象方法
读
file.read(size = -1)	默认读取所有字符, 也可以指定读取的字符个数
file.readline()	读取一行数据, 以\n作为读取分段点, 如果到达文件尾则返回空字符串
file.readlines(max_chars=-1)	读取全部数据, 按行进行分割, 返回一个列表, max_chars为最大字符(或字节)数
写
file.write(text)	写一个字符串到文件流中，返回写入的字符数
file.writelines(lines)	将一个字符串列表写入文件, 这个方法不会在字符串之间自动添加换行符, 可以手动在每个字符串后添加换行符
其他
file.flush()	把写入文件对象的缓存内容写入到磁盘
file.close()	关闭文件(关闭后文件不能再读写, 不然会发生ValueError错误)

文件指针操作方法	
file.tell()	返回当前文件流的绝对位置, 为一个整数, 就是当前文件指针在数据的哪个位置
file.seek(offset, whence=0)	改变文件指针指向数据的位置, 在二进制模式下位移最为准确, offset表示指针位置, whence表示指针的位置相对于文件头0,当前指针1或文件尾2的位置
file.readable()	判断这个文件是否可读,可读返回True,否则返回False
file.writable()	判断这个文件是否可写,可写返回True,否则返回False
file.seekable()	返回这个文件对象是否支持随机定位
file.truncate(pos = None)	剪掉 自pos位置之后的数据，返回新的文件长度


读取文本文件时可能会遇到的问题
    当字符串中有\n换行符时,可以使用rstrip, strip, lstrip等str方法函数去掉
    想要文本有换行,记得在后面加\n换行符

什么是二进制文件
    文件中以字节(bytes)为单位存储,不以字符为单位进行存储的文件

file.seek(offset, whence=0) 函数方法
file.seek(偏移量, whence=相对位置)
    偏移量:
        大于0的数代表向文件末尾方向移动
        小于0的数代表向文件头方向移动
    相对位置:
        0 代表从文件头开始偏移
        1 代表从当前读写位置开始偏移
        2 代表从文件尾开始偏移

示例:
file = open("data3.bin", 'rb')
# 读取data3.bin中的 第5~15
# file.read(5)
file.seek(5, 0)   # 从文件头开始向后移动5个字节
file.seek(-15, 2)   # 从文件尾向前移动15个字节
file.seek(3, 1)   # 向当前位置向后移动3个字节
b2 = file.read(10)
print(b2)
file.close()



标准输入数出文件
    sys.stdin   # 标准输入
    sys.stdout   # 标准输入
    sys.stderr   # 标准错误输出

示例:
sys.stdout.write("This is in Out stream.")
sys.stderr.write("This is in Error stream.")

# 从键盘读取数据,直到输入Ctrl+D文件结束符才停止
in_str = sys.stdin.read()   # 默认的标准输入时读取键盘
print(in_str)

说明:
    每一个python程序启动后,都会有以上三个文件
