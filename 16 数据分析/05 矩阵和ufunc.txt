矩阵
    ndarray -> matrix
    numpy.matrix(可被解释为矩阵的二维容器, copy=True/False) -> 矩阵对象  copy表示数据是否复制, 默认是复制一份新的
        矩阵形式: "1 2 3; 4 5 6"
                 1 2 3
                 4 5 6
    numpy.mat(可被解释为矩阵的二维容器)
        数据共享, 相当于copy=False的matrix
    numpy.bmat("A B; C D")
        A: 1 2
           3 4
        B: 5 6
           7 8
        C: 9 10
           11 12
        D: 13 14
           15 16
        将会生成结果  1  2  5  6
                     3  4  7  8
                     9  10 13 14
                     11 12 15 16

    矩阵对象的属性

        T  转置
        I  取逆


ufunc , 统一(范)化函数
    numpy.frompyfunc(标量函数, 参数个数, 返回值个数) -> numpy.ufunc类型的函数对象
    unfunc函数对象(矢量函数, ...) -> 矢量返回值, ...

    numpy.add
        reduce   累加
        accumulate   累加过程返回
        reduceat   在指定位置累加
        outer   外和

    除法
        真除
            [5 5 -5 -5]<真除>[2 -2 2 -2] = [2.5 -2.5 -2.5 2.5]
            numpy.true_divide()
            numpy.divide()
        地板除
            [5 5 -5 -5]<地板除>[2 -2 2 -2] = [2 -3 -3  2]...[1 -1 1 -1]
            numpy.floor_divide()
        天花板除
            [5 5 -5 -5]<天花板除>[2 -2 2 -2] = [3 -2 -2 3]
        截断除
            [5 5 -5 -5]<截断除>[2 -2 2 -2] = [2 -2 -2  2]...[1 1 -1 -1]

        余数
            被除数 ÷ 除数 = 商...余数
            除数 × 商+余数 = 被除数
        地板除余数
            numpy.remainder()
            numpy.mod
            %
        截断除余数
            numpy.fmod()

    python中几乎所有的算术和关系运算符都被numpy借助ufunc, 实现为可对数组操作的矢量化运算符.


    numpy中的三角函数都是ufunc对象, 可以对参数数组中的每个元素进行三角函数运算, 并将运算解过以数组形式返回

    实现位运算的ufunc
        异或: 运算符 ^   方法 __xor__   函数 bitwise_xor
        1 ^ 0 = 1
        1 ^ 1 = 0
        0 ^ 0 = 0
        0 ^ 1 = 1
        if a^b < 0 then a和b异号