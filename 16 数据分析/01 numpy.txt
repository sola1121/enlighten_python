数据分析基础

matlab语言
python语言

numpy
1. numpy是什么
    1) numerical python, 数值的python, 应用于数值分析领域的python工具
    2) numpy是一个开源的科学计算库, 完全基于标准C
    3) numpy弥补了作为通用编程语言的python在数值计算方面, 能力弱, 速度慢的不足
    4) numpy拥有丰富的数学函数, 强大的多维数组和优异的运算性能
    5) numpy与scipy, scikit, matplotlib等其它科学计算库可以很好的协调工作
    6) numpy可以取代matlab等工具, 允许用户进行快速开发的同时完成交互式的原型设计

---------------------------------------

多维数组 numpy.ndarray对象
    1) numpy中的多维数组是numpy.ndarray类类型的对象, 可用于表示数据接口中的任意位数的数组
    2) 创建多维数组
        numpy.arange(起始, 终止, 步长)  --> 返回一维数组, 首元素就是起始值, 尾元素在终止值之前一位, 步长为每次增长的公差. 缺省起始值为0, 缺省步长为1
        numpy.array(任何可被解释为数组的容器)
    3) 数组: 内存连续, 元素同质. 以牺牲灵活性换取性能优势.
    4) ndarray.dtype属性表示元素的数据类型. 通过的type参数和astype()方法可以指定和修改元素的数据类型   dtype : data type
    5) ndarray.shape属性表示数组的维度: (高维度数, ..., 低维度数)
    6) 元素索引
        数组[索引]
        数组[行索引][列索引]
        数组[页索引][行索引][列索引]
        数组[页索引, 行索引, 列索引]
    7) numpy的内置类型和自定义类型
        (1) numpy的内置类型(都是固定长度, 基于C语言数据类型)
            numpy.bool   # 1字节 True/False 1/0
            numpy.int8   # 1字节, 有符号整型, -128~127
            numpy.int16  # 2字节, 有符号整型
            numpy.int32  # 4字节, 有符号整型
            numpy.int64  # 8字节, 有符号整型
            numpy.uint8  # 1字节, 无符号整型, 0~255
            numpy.uint16 # 2字节, 无符号整型
            numpy.uint32 # 4字节, 无符号整型
            numpy.uint64 # 8字节, 无符号整型
            numpy.float16 # 2字节浮点型
            numpy.float32 # 4字节浮点型
            numpy.float64 # 8字节浮点型
            numpy.complex64  # 8字节复数型
            numpy.complex128 # 16字节复数型
            numpy.str   # 字符串型
        (2) 自定义类型: 通过dtype将多个相同或者不同的numpy内置类型组合成某种复合类型, 用于数组元素的数据类型
            除了使用内置类型的全称以外还可以通过类型编码字符串简化类型的说明. 位数/8
                numpy.int8 -> i1
                numpy.int16 -> i2
                numpy.uint32 -> u4
                numpy.float64 -> f8
                numpy.complex128 -> c16
                numpy.str -> U字符数
                numpy.bool -> b
            对于多字节整数可以加上字节序前缀
                <   小端字节序, 低数位低地址
                    L      H
                    0x12   0x34
                =   处理器系统默认 
                >   大端字节序, 低数位高地址
                    L      H
                    0x34   0x12

    8) 切片
        数组[起始:终止:步长, 起始:终止:步长, ...]   # 可以多个维度的进行切片
            缺省起始, 首(步长为正), 尾(步长为负)
            缺省终止, 尾后(步长为正), 首前(步长为负)
            缺省步长, 1
            靠近端部的一个或几个连续的维度使用缺省切片, 可以用"..."表示

    9) 改变维度
        视图变维: 针对一个数组对象获取不同维度的视图
            数组.reshape(新维度)  --> 数组的新维度视图
            数组.ravel()  --> 数组的一维视图

        复制变维: 针对一个数组对象获取其不同维度的副本
            数组.flatten()  --> 数组的一维副本

        就地变维
            数组.shape = 新维度   # 元组类型参数
            数组.resize(新维度)
        
        视图转置
            数组.transpose()  --> 数组的转置视图
            数组.T 转置视图属性, 直接改变矩阵数组
    
    10) 组合与拆分
        (1) 垂直组合/拆分
            numpy.vstack((上, 下))
            numpy.vsplit(数组, 份数)  --> 子数组集合
        (2) 水平组合/拆分
            numpy.hstack((左, 右))
            numpy.hsplit(数组, 份数)  --> 子数组集合
        (3) 深度组合/拆分
            numpy.dstack((前, 后))   # 每个元素中各对应行形成新矩阵并转置
            numpy.dsplit(数组, 份数)   --> 子数组集合
        (4) 行/列组合
            numpy.row_stack((上, 下))    
            numpy.column_stack((左, 右))
    
    11) ndarray类的属性
        dtype : 元素类型
        shape : 数组维度
        T : 转置视图
        ndim : 维度
        size : 元素数, len返回数组中的元素的个数, 但是只能体现矩阵的行数, 只有对以为数组二者才等价
        itemsize : 元素字节数
        nbytes : 总字节数 = size * itemsize
        flat : 扁平迭代器
        real : 实部数组
        imag : 虚部数组
        数组.tolist()  --> 列表对象
