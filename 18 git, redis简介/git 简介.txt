版本控制
    集中式
    分布式


git
版本仓库: 存储代码文件等的地方
本地仓库: 本机仓库
远程仓库: 充当"中央服务器", 用于不同节点之间进行代码交换的地方
克隆: 复制
分支: 不同分支做不一样的事, 用于协同
标签: 


安装
    apt-get git


使用
    新建空目录用于创建仓库
        mkdir gitdemo
    打开空仓库
        cd gitdemo
    使用git初始化空仓库, 将空目录变为空仓库
        git init
    查看空仓库
        ls -ah
    创建文件/代码文件
        abc.txt
---------------------------------------

    使用git将文件加到仓库中, 在缓存区
        git add abc.txt
        没有任何提示表示没有问题
    使用git将文件提交到仓库之中
        git commit -m "备注信息"

---------------------------------------
    
    查看当前仓库的状态
        git status
    查看已修改的文件的修改内容
        git diff abc.txt
    通过查看日志文件, 获取提交记录
        git log

---------------------------------------
    返回上一个版本(回退到上一个提交的commit)
        git reset --hard HEAD^
    删除仓库中文件
        git rm xyz.txt


---------------------------------------

    现有本地仓库, 后有远程仓库
    获取远程仓库, 与本地仓库之间建立链接关系
        git remote add 库名(通常命名origin) 远程库地址

---------------------------------------

    使用SSH进行上传提交更新时需要公钥生成获取pubkey
        ssh-keygen -t rsa -b 4096 -C 邮箱地址
            -t type, 指定密钥的类型，密钥的类型有两种，一种是RSA，一种是DSA
            -b bit, 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。
            -C comment, 表示要提供一个新注释，用于识别这个密钥，所以里面不一定非要填邮箱，可以是任何内容，邮箱仅仅是识别用的key
    生成的pubkey默认位置: /home/用户主目录/.ssh目录下
    打开id_rsa.pub, 复制内容在github的setting的SSH and GPG key中添加SSH key

    报错: sign_and_send_pubkey: ....
    解决: 运行ssh-add

---------------------------------------

    从远程仓库同步到本地仓库
        git pull origin master

        取回远程主机某个分支的更新，再与本地的指定分支合并
        git pull <远程主机名> <远程分支名>:<本地分支名>

    从本地仓库提交同步代码到远程仓库
        git push origin master

        远程提交至新分支
        git push --set-upstream origin 新的分支

    先创建远程仓库, 再有本地仓库
    克隆远程仓库都本地空目录下
        git clone 源库地址
    自动生成对应的本地仓库, 本地仓库与远程仓库相对应



分支
---------------------------------------
查看分支
    git branch
    列出分支, 并标注出当前所属分支
创建分支
    git branch 分支名
切换分支
    git checkout 分支名
创建并切换到新的分支
    git checkout -b 新分支名
删除分支
    git checkout -d 被删分支名

分支合并, 将其他分支合并到当前分支
    git merge 其他分支名

当两个分支对同一个文件有修改, 会产生冲突
合并分支冲突情况
    git merge 其他分支名
    冲突提示
        ...
    解决方式
        查看冲突
            git diff 文件名
            冲突内容
                    <<<<<<< Head
                        当前分支修改内容
                    =======
                        其他分支修改内容
                    >>>>>>> dev
            手动修改要保存内容
            git add 文件名
            git commit -m "备注内容"
            git merge 其他分支

标签
---------------------------------------
创建标签
    git tag 标签名
查看标签
    git show 标签名

对已操作过的commit进行添加标签
    git tag -a 标签名 -m "标签注释"