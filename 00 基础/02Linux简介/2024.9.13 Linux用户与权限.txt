1.文件或目录的权限
  不论是Windows, MacOS, Linux均采用多用户的管理模式进行权限管理.
  
  1)查看权限 ls -l 文件名或目录名
    -rw-rw-r-- 1 sola1121 sola1121 100 1月  24 16:00 C_plus.cpp
    0123456789   用户名 用户组
    0 代表类型
      d 代表目录
      - 代表文件
    123
      所有者权限
    456 
      表示同组其他用户具有的权限
    789
      其他用户具有的权限
  2)权限类型
    r: 读权限
    w: 写权限
    x: 执行权限


2.useradd 创建用户, passwd 指定用户的密码, userdel 删除用户
  在Linux系统中, 拥有最大权限的账户名为root, 常称为超级管理员
  在root用户下, 使用useradd添加用户, passwd为其设置密码, userdel删除该用户
    useradd -m 用户名
    passwd 用户名
    userdel 用户名

  useradd [-g -d] 用户名
    -g : 指定用户的用户组, 不指定-g, 会创建同名组并自动加入, 指定-g需要组已经粗再, 如已存在同名组, 必须使用-g
    -d : 指定用户的home路径, 不指定, home目录默认再/home/用户名

  userdel [-r] 用户名
    -r : 删除用户的home目录, 不使用-r, 删除用户时, 该用户的home目录保留

  当创建了普通用户之后, 再/home目录下就会创建和普通用户名一致的文件夹
  普通用户在自己的家目录下是有所有权限的, 在其他普通用户的家目录下没有权限


3.sudo 用超级用户root权限来执行这些命令
  在其他命令之前, 带上sudo, 即可为这一条命令临时赋予root权限
  格式: sudo 命令 [选项] [参数]
  常用选项
    -i : 切换到root用户

  在使用Linux的时候, 生产环境下不要直接使用root用户, 可以使用普通用户, 需要用到root用户的权限的时候用sudo做临时申请

  切换到root用户, 执行visudo命令, 会自动通过vi编辑器打开 /etc/sudoers文件, 在文件最后添加;
  其中NOPASSWD:ALL, 表示使用sudo命令, 无需输入密码, 最后保存修改的内容.


4.exit 退出用户登录


4.用户,用户组
  Linux系统可以配置多个用户, 多个用户组
  用户可以加入多个用户组中

  Linux中关于权限的管控级别由2个, 分别是:
    1) 针对用户的权限控制
    2) 针对用户组的权限控制
  如
    针对某个文件, 可以控制用户的权限, 也可以控制用户组的权限


5.groupadd添加用户组, groupdel删除用户组, id查看用户所属的组, uermod修改用户所属的组
  创建一个用户组
    groupadd 组名

  删除一个用户组
    groupdel 组名

  查看用户所属的组
    id 用户名 (不提供用户名, 则查看自身)

  修改用户所属组, 将指定用户加入指定用户组
    usermode -aG 用户组 用户名


6.getent 查看当前系统中有哪些用户
  语法: getent passwd
  打印共有7份信息, 分别是
  用户名:密码(x):用户ID:组ID:描述信息:HOME目录:执行终端(默认的bash)


7.认知权限信息
  可以使用ls -l 以列表形式查看内容, 并显示权限细节

  权限细节总共分为10个槽位, 以1, 2-4, 5-7, 8-10各为一组
    文件性质: -或d或l
    所属用户权限: r或- w或- x或-
    所属用户组权限: r或- w或- x或-
    其他用户权限: r或- w或- x或-
  注:
    第1个槽位为文件性质, -表示文件, d表示文件夹, l表示软链接
  示例:
    drwxr-xr-x
    从左向右读, d 表示这是一个文件夹
    对于所属用户, rwx 表示其是可读r, 可写w, 可执行x 的
    对于所属用户组, r-x 表示其是可读r, 不可写-, 可执行x 的
    对于其他用户, r-x 表示其是可读r, 不可写-, 可执行x 的


8.chmod 修改文件权限
  注意
    只有文件, 文件夹的所属用户, root用户可以修改权限对应的文件权限
  格式: chmod 选项 权限 文件
  选项
    -R : 递归操作, 对文件夹内全部内容应用同样的操作
  权限
    +r 增加读权限
    -r 去掉读权限
    +w 增加些权限
    -w 去掉些权限
    +x 增加执行权限
    -x 去掉执行权限
    示例: +rw +rwx -rwx
  分类
    a : (all)所有用户 chmod a+xf 文件 
    u : (user)所有者用户 chmod u+x 文件
    g : (group)所属用户组 chmod g-w 文件 
    o : (other)其他用户 chmod o-r 文件 
    示例
      chmod a+x d.txt 
      chmod u-rwx d.txt 
      chmod o-r d.txt
      chmod g-w d.txt
  以数字方式去修改文件权限
    r : 4, 二进制100
    w : 2, 二进制010
    x : 1, 二进制001
    将权限组合成一个百位数字: 百位(对应当前用户,即2-4槽位), 十位(对应用户组,即5-7槽位), 个位(对应其他用户, 即8-10槽位)
    百位给7, 即4+2+1=7, 二进制111, 表示所属用户对该文件可读r, 可写w, 可执行x
    百位给6, 即4+2=6, 二进制110, 表示所属用户对该文件可读r, 可写w, 不可执行-
    百位给5, 即4+1=5, 二进制101, 表示所属用户对该文件可读r, 不可写-, 可执行x
    百位给4, 即4, 二进制100, 表示所属用户对该文件可读r, 不可写-, 不可执行-
    百位给3, 即2+1=3, 二进制011, 表示所属用户对该文件不可读-, 可写w, 可执行x
    百位给2, 即2, 二进制010, 表示所属用户对该文件不可读-, 可写w, 不可执行-
    百位给1, 即1, 二进制001, 表示所属用户对该文件不可读-, 不可写-, 可执行x
    同理, 对于十位, 个位的数字, 即对应所属用户组的权限, 其他用户的权限
    示例
      chmod 764 d.txt 所属用户7 同组用户6 其他4
      chmod 664 d.txt 所属用户6 同组用户6 其他4
      chmod 777 d.txt 所属用户7 同组用户7 其他7


9.chown 修改文件, 文件夹的所属用户和用户组
  注意
    普通用户无法修改所属为其他用户或组的权限, 因此该命令仅能由root用户执行
    若还是想, 
        方式1,使用sudo临时获得权限
        方式2, 使用root用户调用visudo, 会自动通过vi编辑器打开 /etc/sudoers文件, 在文件最后添加;
              其中NOPASSWD:ALL, 表示使用sudo命令, 无需输入密码, 最后保存修改的内容.
  格式
    chown 选项 [用户][:][用户组] 文件或文件夹
  选项
    -R : 递归操作, 对文件夹内全部内容应用同样的操作
  用户: 可选, 表示所修改的所属用户
  : : 用于分隔用户和用户组
  用户组: 可选, 表示所修改的用户组

  示例
    将hello.txt所属用户修改为root
      chown root hello.txt
    将hello.txt所属用户组修改为root
      chown :root hello.txt
    将hello.txt所属用户修改为是root, 用户组修改为sola1121
      chown root:sola1121 hello.txt
